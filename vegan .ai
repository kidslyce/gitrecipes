%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 0005.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: HP 15
%%CreationDate: 11/13/2018
%%BoundingBox: 0 0 600 500
%%HiResBoundingBox: 0 0 600 500
%%CropBox: 0 0 600 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-11-13T02:48:24+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-11-13T02:48:24+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-11-13T02:48:24+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>216</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FULqOqaZplubnUbuGztwaerO6xrXwqxG/tgMgObGUhEWTT&#xA;CdS/PP8AL+zbjFcz3x7/AFaFqD6ZfSB+jKJaqAcaWuxjzQKf85CeR2YA22oID+0YoqD7pScj+bh5&#xA;sP5Qx+bJtE/M7yLrMixWerRLO1KQ3HKBiSacV9UIGbfopOWxzwlyLfDU45ciyjLW92KuxV2KuxV2&#xA;KpXrXmjy7oictW1GCzqKqkjjmw/yUFXb6BkJTjHmWueWMeZpiF1+fH5fwvxjlubkfzxQED/koYz+&#xA;GUnVQcc67GHWv58fl/M/GSW5th/PLASP+SZkP4YjVQUa7GWX6L5o8u62nLSdRgvKCrJG45qP8pDR&#xA;1+kZdGcZci5EMsZcjaaZNsdirsVdirsVdirG9b/MfyTortFf6tCJ02aCImaQHwZYg5U/PKpZox5l&#xA;pnqIR5ljcn5/eQ1cqovHA6OsK0P/AATg/hlf5uDR+fx+aN0787Py9vWCNfPaO3QXMTqPpZQ6j6Th&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:c1082423-1960-8b4d-96ae-608b49f36dd1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:c1082423-1960-8b4d-96ae-608b49f36dd1</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:d945d21a-48fb-a94c-b1fd-29be3a112571</stRef:instanceID>
            <stRef:documentID>xmp.did:d945d21a-48fb-a94c-b1fd-29be3a112571</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d945d21a-48fb-a94c-b1fd-29be3a112571</stEvt:instanceID>
                  <stEvt:when>2018-11-13T02:07:41+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c1082423-1960-8b4d-96ae-608b49f36dd1</stEvt:instanceID>
                  <stEvt:when>2018-11-13T02:48:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>ffffff</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Green 800</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>125</xmpG:green>
                           <xmpG:blue>50</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
600 500 li
600 0 li
cp
clp
0 500 mo
600 500 li
600 0 li
0 0 li
0 500 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
159.041 253.067 mo
158.246 253.067 157.609 253.289 157.126 253.731 cv
156.644 254.174 156.214 254.963 155.837 256.096 cv
150.269 272.02 li
144.27 255.861 li
143.893 254.846 143.479 254.125 143.029 253.702 cv
142.58 253.279 142.003 253.067 141.3 253.067 cv
140.337 253.067 139.536 253.373 138.897 253.985 cv
138.258 254.598 137.939 255.366 137.939 256.291 cv
137.939 256.616 137.973 256.938 138.037 257.258 cv
138.102 257.578 138.193 257.874 138.311 258.147 cv
146.986 279.913 li
147.351 280.786 147.771 281.411 148.246 281.789 cv
148.721 282.167 149.331 282.355 150.073 282.355 cv
150.868 282.355 151.519 282.147 152.027 281.73 cv
152.535 281.313 152.979 280.624 153.355 279.659 cv
161.757 258.304 li
161.899 257.939 162.007 257.564 162.08 257.18 cv
162.152 256.796 162.187 256.421 162.187 256.057 cv
162.187 255.132 161.907 254.402 161.347 253.868 cv
160.786 253.334 160.018 253.067 159.041 253.067 cv
cp
.180392 .490196 .196078 rgb
f
179.479 276.533 mo
178.723 276.038 177.564 275.791 176.001 275.791 cv
170.53 275.791 li
170.53 270.457 li
175.083 270.457 li
176.632 270.457 177.789 270.213 178.551 269.724 cv
179.313 269.235 179.693 268.483 179.693 267.467 cv
179.693 266.451 179.313 265.696 178.551 265.201 cv
177.789 264.705 176.632 264.458 175.083 264.458 cv
170.53 264.458 li
170.53 259.378 li
175.805 259.378 li
177.355 259.378 178.512 259.131 179.273 258.636 cv
180.036 258.141 180.417 257.393 180.417 256.389 cv
180.417 255.36 180.032 254.594 179.264 254.093 cv
178.496 253.592 177.343 253.341 175.805 253.341 cv
168.518 253.341 li
166.862 253.341 165.704 253.666 165.04 254.317 cv
164.375 254.97 164.043 256.161 164.043 257.894 cv
164.043 277.705 li
164.043 279.281 164.355 280.355 164.981 280.93 cv
165.606 281.503 166.759 281.789 168.439 281.789 cv
176.001 281.789 li
177.564 281.789 178.723 281.542 179.479 281.047 cv
180.235 280.552 180.612 279.796 180.612 278.78 cv
180.612 277.777 180.235 277.028 179.479 276.533 cv
cp
f
205.212 264.653 mo
200.445 264.653 li
198.895 264.653 197.748 264.904 197.006 265.406 cv
196.263 265.907 195.892 266.673 195.892 267.702 cv
195.892 268.73 196.259 269.489 196.996 269.978 cv
197.732 270.467 198.881 270.711 200.445 270.711 cv
202.73 270.711 li
202.691 272.456 202.15 273.847 201.109 274.882 cv
200.067 275.918 198.686 276.436 196.967 276.436 cv
194.804 276.436 193.079 275.622 191.789 273.993 cv
190.5 272.364 189.854 270.177 189.854 267.428 cv
189.854 264.719 190.496 262.586 191.779 261.029 cv
193.063 259.473 194.804 258.694 197.006 258.694 cv
198.477 258.694 200.048 259.156 201.715 260.082 cv
203.381 261.007 204.456 261.469 204.938 261.469 cv
205.681 261.469 206.326 261.163 206.873 260.551 cv
207.42 259.938 207.693 259.229 207.693 258.421 cv
207.693 256.87 206.674 255.497 204.636 254.298 cv
202.598 253.1 200.126 252.501 197.221 252.501 cv
192.831 252.501 189.337 253.858 186.738 256.574 cv
184.139 259.29 182.839 262.947 182.839 267.545 cv
182.839 272 184.109 275.628 186.65 278.429 cv
189.19 281.229 192.459 282.629 196.459 282.629 cv
200.431 282.629 203.639 281.369 206.082 278.849 cv
208.524 276.328 209.745 273.043 209.745 268.991 cv
209.745 267.455 209.394 266.347 208.69 265.67 cv
207.986 264.992 206.828 264.653 205.212 264.653 cv
cp
f
219.632 270.457 mo
223.148 259.906 li
226.431 270.457 li
219.632 270.457 li
cp
235.282 277.139 mo
228.072 256.701 li
227.629 255.478 227.001 254.542 226.187 253.897 cv
225.372 253.253 224.413 252.931 223.305 252.931 cv
222.133 252.931 221.146 253.27 220.345 253.946 cv
219.544 254.623 218.875 255.686 218.342 257.131 cv
210.937 277.236 li
210.833 277.497 210.755 277.783 210.703 278.097 cv
210.65 278.409 210.624 278.748 210.624 279.112 cv
210.624 280.011 210.914 280.757 211.494 281.35 cv
212.074 281.942 212.813 282.238 213.711 282.238 cv
214.415 282.238 215.03 281.987 215.558 281.486 cv
216.085 280.985 216.505 280.258 216.818 279.308 cv
217.795 276.436 li
228.307 276.436 li
229.108 279.073 li
229.434 280.141 229.874 280.937 230.427 281.457 cv
230.979 281.978 231.673 282.238 232.508 282.238 cv
233.445 282.238 234.213 281.955 234.813 281.389 cv
235.413 280.822 235.712 280.089 235.712 279.19 cv
235.712 278.93 235.677 278.631 235.604 278.292 cv
235.532 277.953 235.425 277.568 235.282 277.139 cv
cp
f
259.803 252.97 mo
258.709 252.97 257.895 253.351 257.361 254.112 cv
256.828 254.875 256.56 256.03 256.56 257.581 cv
256.56 270.906 li
244.602 255.1 li
244.016 254.344 243.459 253.807 242.932 253.487 cv
242.404 253.168 241.814 253.009 241.163 253.009 cv
240.147 253.009 239.391 253.367 238.897 254.083 cv
238.402 254.8 238.154 255.888 238.154 257.347 cv
238.154 277.549 li
238.154 279.1 238.422 280.252 238.956 281.008 cv
239.489 281.763 240.304 282.141 241.398 282.141 cv
242.492 282.141 243.307 281.763 243.84 281.008 cv
244.374 280.252 244.641 279.1 244.641 277.549 cv
244.641 264.458 li
256.364 279.952 li
256.99 280.773 257.595 281.372 258.182 281.75 cv
258.768 282.128 259.399 282.316 260.077 282.316 cv
261.093 282.316 261.841 281.987 262.324 281.33 cv
262.806 280.673 263.047 279.652 263.047 278.272 cv
263.047 257.581 li
263.047 256.03 262.779 254.875 262.246 254.112 cv
261.712 253.351 260.897 252.97 259.803 252.97 cv
cp
f
67.7798 240.999 mo
66.8921 243.218 61.4004 257.641 69.043 272.951 cv
77.1309 289.154 93.3105 293.088 95.4619 293.571 cv
94.3633 291.542 93.3599 289.456 92.4297 287.341 cv
91.9512 286.25 91.5039 285.146 91.0571 284.05 cv
89.769 280.766 li
88.9297 278.587 88.0425 276.476 87.0552 274.388 cv
86.0664 272.304 85.0015 270.25 83.856 268.232 cv
81.5708 264.188 78.9702 260.304 76.2671 256.393 cv
79.9121 259.447 83.123 263.026 85.8901 266.943 cv
87.2734 268.902 88.5225 270.961 89.6553 273.085 cv
90.2183 274.148 90.7441 275.232 91.2441 276.329 cv
91.7373 277.429 92.1895 278.54 92.6299 279.645 cv
95.126 286.233 li
95.8862 288.216 96.6846 290.183 97.5063 292.146 cv
98.2168 287.027 99.2476 273.563 92.8301 261.924 cv
84.7188 247.212 67.7798 240.999 67.7798 240.999 cv
cp
f
106.662 267.893 mo
100.804 277.59 101.323 289.119 101.755 293.288 cv
101.993 292.751 102.234 292.214 102.466 291.674 cv
104.779 286.228 li
105.185 285.315 105.602 284.397 106.052 283.491 cv
106.507 282.588 106.984 281.695 107.492 280.821 cv
108.513 279.077 109.629 277.391 110.855 275.793 cv
113.307 272.598 116.12 269.701 119.28 267.258 cv
116.882 270.45 114.571 273.624 112.52 276.941 cv
111.491 278.598 110.53 280.285 109.631 282.001 cv
108.733 283.721 107.919 285.463 107.142 287.263 cv
105.953 289.977 li
105.542 290.882 105.129 291.793 104.692 292.692 cv
104.457 293.175 104.217 293.653 103.972 294.131 cv
108.19 292.378 118.049 287.483 123.675 278.168 cv
130.969 266.092 128.375 251.164 128.375 251.164 cv
128.375 251.164 113.955 255.815 106.662 267.893 cv
cp
f
273.549 293.32 mo
273.549 297.252 270.35 300.451 266.417 300.451 cv
64.4302 300.451 li
60.498 300.451 57.2988 297.252 57.2988 293.32 cv
57.2988 241.81 li
57.2988 237.878 60.498 234.679 64.4302 234.679 cv
266.417 234.679 li
270.35 234.679 273.549 237.878 273.549 241.81 cv
273.549 293.32 li
cp
266.417 226.091 mo
64.4302 226.091 li
55.7622 226.091 48.7104 233.143 48.7104 241.81 cv
48.7104 293.32 li
48.7104 301.987 55.7622 309.039 64.4302 309.039 cv
266.417 309.039 li
275.085 309.039 282.137 301.987 282.137 293.32 cv
282.137 241.81 li
282.137 233.143 275.085 226.091 266.417 226.091 cv
cp
f
370.926 259.248 mo
361.465 276.408 362.984 296.257 364.031 303.804 cv
365.244 300.909 366.421 298.01 367.541 295.086 cv
371.221 285.373 li
371.87 283.744 372.537 282.105 373.264 280.485 cv
374.001 278.869 374.776 277.271 375.605 275.702 cv
377.276 272.571 379.118 269.536 381.157 266.647 cv
385.235 260.875 389.97 255.598 395.344 251.094 cv
391.358 256.859 387.524 262.587 384.156 268.549 cv
382.467 271.523 380.897 274.551 379.439 277.623 cv
377.984 280.701 376.676 283.813 375.438 287.025 cv
373.539 291.867 li
372.881 293.484 372.221 295.11 371.517 296.719 cv
370.145 299.837 368.665 302.912 367.046 305.904 cv
370.218 305.191 394.07 299.393 405.994 275.505 cv
417.26 252.935 409.164 231.671 407.855 228.4 cv
407.855 228.4 382.884 237.56 370.926 259.248 cv
cp
f
318.524 243.385 mo
318.524 243.385 314.699 265.393 325.452 283.196 cv
333.746 296.93 348.281 304.145 354.5 306.729 cv
354.14 306.025 353.785 305.319 353.438 304.609 cv
352.794 303.282 352.187 301.939 351.58 300.604 cv
349.826 296.604 li
348.682 293.95 347.48 291.382 346.158 288.847 cv
344.832 286.317 343.415 283.829 341.899 281.389 cv
338.875 276.498 335.468 271.818 331.933 267.112 cv
336.592 270.714 340.738 274.984 344.353 279.694 cv
346.159 282.05 347.806 284.536 349.311 287.108 cv
350.059 288.396 350.763 289.713 351.435 291.044 cv
352.098 292.38 352.712 293.733 353.311 295.078 cv
356.721 303.107 li
357.063 303.903 357.418 304.694 357.769 305.487 cv
358.404 299.341 359.17 282.345 350.535 268.048 cv
339.782 250.244 318.524 243.385 318.524 243.385 cv
cp
f
441.365 275.485 mo
440.524 275.485 439.852 275.72 439.342 276.188 cv
438.831 276.654 438.377 277.488 437.979 278.686 cv
432.093 295.516 li
425.753 278.438 li
425.354 277.364 424.917 276.604 424.442 276.156 cv
423.967 275.709 423.357 275.485 422.614 275.485 cv
421.597 275.485 420.75 275.809 420.074 276.455 cv
419.399 277.103 419.063 277.914 419.063 278.893 cv
419.063 279.236 419.098 279.577 419.166 279.914 cv
419.234 280.252 419.331 280.564 419.455 280.854 cv
428.624 303.858 li
429.01 304.781 429.454 305.441 429.956 305.842 cv
430.457 306.241 431.102 306.44 431.887 306.44 cv
432.727 306.44 433.415 306.221 433.951 305.779 cv
434.488 305.339 434.957 304.609 435.355 303.591 cv
444.235 281.02 li
444.387 280.634 444.5 280.237 444.576 279.832 cv
444.652 279.426 444.689 279.029 444.689 278.645 cv
444.689 277.667 444.395 276.896 443.802 276.332 cv
443.209 275.767 442.397 275.485 441.365 275.485 cv
cp
f
462.966 300.286 mo
462.166 299.763 460.942 299.502 459.29 299.502 cv
453.508 299.502 li
453.508 293.864 li
458.319 293.864 li
459.957 293.864 461.18 293.605 461.984 293.09 cv
462.79 292.573 463.193 291.778 463.193 290.704 cv
463.193 289.631 462.79 288.832 461.984 288.309 cv
461.18 287.785 459.957 287.524 458.319 287.524 cv
453.508 287.524 li
453.508 282.155 li
459.083 282.155 li
460.721 282.155 461.943 281.894 462.749 281.37 cv
463.555 280.847 463.957 280.056 463.957 278.995 cv
463.957 277.908 463.55 277.099 462.738 276.569 cv
461.927 276.039 460.709 275.774 459.083 275.774 cv
451.381 275.774 li
449.632 275.774 448.407 276.118 447.705 276.807 cv
447.003 277.495 446.651 278.755 446.651 280.586 cv
446.651 301.525 li
446.651 303.19 446.982 304.326 447.643 304.933 cv
448.304 305.539 449.522 305.842 451.298 305.842 cv
459.29 305.842 li
460.942 305.842 462.166 305.58 462.966 305.057 cv
463.765 304.533 464.163 303.735 464.163 302.661 cv
464.163 301.601 463.765 300.81 462.966 300.286 cv
cp
f
490.164 287.73 mo
485.125 287.73 li
483.487 287.73 482.275 287.996 481.49 288.525 cv
480.705 289.056 480.313 289.865 480.313 290.952 cv
480.313 292.039 480.701 292.842 481.48 293.358 cv
482.259 293.874 483.473 294.133 485.125 294.133 cv
487.541 294.133 li
487.5 295.978 486.928 297.447 485.827 298.541 cv
484.727 299.636 483.267 300.183 481.449 300.183 cv
479.163 300.183 477.34 299.323 475.977 297.602 cv
474.613 295.881 473.933 293.567 473.933 290.663 cv
473.933 287.8 474.609 285.545 475.966 283.9 cv
477.323 282.255 479.163 281.433 481.49 281.433 cv
483.045 281.433 484.706 281.921 486.467 282.898 cv
488.229 283.876 489.364 284.364 489.874 284.364 cv
490.659 284.364 491.341 284.041 491.919 283.395 cv
492.497 282.747 492.786 281.997 492.786 281.144 cv
492.786 279.505 491.708 278.053 489.555 276.786 cv
487.4 275.519 484.788 274.886 481.718 274.886 cv
477.077 274.886 473.385 276.321 470.639 279.191 cv
467.891 282.063 466.518 285.927 466.518 290.787 cv
466.518 295.495 467.859 299.329 470.546 302.289 cv
473.23 305.25 476.685 306.729 480.912 306.729 cv
485.11 306.729 488.501 305.397 491.082 302.733 cv
493.664 300.069 494.954 296.597 494.954 292.315 cv
494.954 290.691 494.583 289.521 493.84 288.805 cv
493.096 288.089 491.871 287.73 490.164 287.73 cv
cp
f
505.403 293.864 mo
509.121 282.713 li
512.59 293.864 li
505.403 293.864 li
cp
521.945 300.927 mo
514.325 279.326 li
513.856 278.032 513.193 277.044 512.332 276.362 cv
511.471 275.681 510.457 275.34 509.286 275.34 cv
508.047 275.34 507.004 275.698 506.157 276.414 cv
505.311 277.13 504.604 278.252 504.041 279.78 cv
496.214 301.029 li
496.104 301.306 496.022 301.607 495.967 301.938 cv
495.91 302.269 495.884 302.627 495.884 303.012 cv
495.884 303.962 496.189 304.75 496.803 305.377 cv
497.416 306.004 498.196 306.316 499.146 306.316 cv
499.89 306.316 500.54 306.051 501.098 305.521 cv
501.655 304.991 502.1 304.224 502.43 303.219 cv
503.463 300.183 li
514.572 300.183 li
515.419 302.971 li
515.764 304.1 516.229 304.939 516.813 305.49 cv
517.397 306.041 518.131 306.316 519.013 306.316 cv
520.004 306.316 520.815 306.017 521.449 305.418 cv
522.083 304.819 522.399 304.045 522.399 303.095 cv
522.399 302.819 522.362 302.503 522.285 302.145 cv
522.209 301.786 522.096 301.381 521.945 300.927 cv
cp
f
547.861 275.382 mo
546.705 275.382 545.844 275.784 545.28 276.59 cv
544.716 277.396 544.434 278.616 544.434 280.255 cv
544.434 294.339 li
531.795 277.633 li
531.176 276.834 530.587 276.267 530.029 275.929 cv
529.472 275.591 528.849 275.423 528.16 275.423 cv
527.087 275.423 526.288 275.802 525.766 276.559 cv
525.243 277.315 524.98 278.466 524.98 280.008 cv
524.98 301.36 li
524.98 302.999 525.264 304.217 525.827 305.016 cv
526.391 305.813 527.252 306.213 528.408 306.213 cv
529.564 306.213 530.426 305.813 530.99 305.016 cv
531.554 304.217 531.837 302.999 531.837 301.36 cv
531.837 287.524 li
544.227 303.9 li
544.888 304.768 545.527 305.4 546.147 305.8 cv
546.767 306.199 547.434 306.398 548.15 306.398 cv
549.225 306.398 550.016 306.051 550.525 305.356 cv
551.035 304.661 551.289 303.583 551.289 302.124 cv
551.289 280.255 li
551.289 278.616 551.007 277.396 550.442 276.59 cv
549.879 275.784 549.018 275.382 547.861 275.382 cv
cp
f
430.074 229.523 mo
425.527 229.523 li
423.354 229.523 421.733 229.871 420.665 230.564 cv
419.597 231.258 419.063 232.309 419.063 233.715 cv
419.063 235.103 419.583 236.153 420.624 236.865 cv
421.665 237.577 423.189 237.933 425.198 237.933 cv
426.021 237.933 li
426.021 263.354 li
426.021 265.527 426.399 267.144 427.157 268.203 cv
427.915 269.262 429.07 269.791 430.622 269.791 cv
432.193 269.791 433.353 269.262 434.102 268.203 cv
434.85 267.144 435.225 265.527 435.225 263.354 cv
435.225 235.961 li
435.225 233.642 434.827 231.989 434.033 231.003 cv
433.238 230.017 431.919 229.523 430.074 229.523 cv
cp
f
463.439 258.793 mo
462.161 261.049 460.408 262.176 458.18 262.176 cv
455.951 262.176 454.194 261.049 452.906 258.793 cv
451.619 256.538 450.976 253.42 450.976 249.438 cv
450.976 245.494 451.619 242.394 452.906 240.138 cv
454.194 237.883 455.951 236.755 458.18 236.755 cv
460.39 236.755 462.139 237.883 463.426 240.138 cv
464.713 242.394 465.357 245.494 465.357 249.438 cv
465.357 253.42 464.718 256.538 463.439 258.793 cv
cp
458.125 228.4 mo
453.048 228.4 449.008 230.295 446.004 234.084 cv
443 237.874 441.497 243.01 441.497 249.493 cv
441.497 255.977 443 261.112 446.004 264.901 cv
449.008 268.691 453.048 270.586 458.125 270.586 cv
463.202 270.586 467.247 268.691 470.261 264.901 cv
473.273 261.112 474.78 255.977 474.78 249.493 cv
474.78 243.01 473.273 237.874 470.261 234.084 cv
467.247 230.295 463.202 228.4 458.125 228.4 cv
cp
f
499.79 258.793 mo
498.512 261.049 496.759 262.176 494.53 262.176 cv
492.303 262.176 490.545 261.049 489.258 258.793 cv
487.97 256.538 487.326 253.42 487.326 249.438 cv
487.326 245.494 487.97 242.394 489.258 240.138 cv
490.545 237.883 492.303 236.755 494.53 236.755 cv
496.74 236.755 498.489 237.883 499.776 240.138 cv
501.064 242.394 501.708 245.494 501.708 249.438 cv
501.708 253.42 501.068 256.538 499.79 258.793 cv
cp
494.476 228.4 mo
489.398 228.4 485.358 230.295 482.354 234.084 cv
479.351 237.874 477.849 243.01 477.849 249.493 cv
477.849 255.977 479.351 261.112 482.354 264.901 cv
485.358 268.691 489.398 270.586 494.476 270.586 cv
499.553 270.586 503.598 268.691 506.611 264.901 cv
509.624 261.112 511.131 255.977 511.131 249.493 cv
511.131 243.01 509.624 237.874 506.611 234.084 cv
503.598 230.295 499.553 228.4 494.476 228.4 cv
cp
f
519.752 240.169 mo
519.191 239.542 518.91 238.788 518.91 237.905 cv
518.91 237.022 519.187 236.273 519.738 235.655 cv
520.29 235.037 520.964 234.728 521.76 234.728 cv
522.556 234.728 523.234 235.037 523.795 235.655 cv
524.355 236.273 524.636 237.022 524.636 237.905 cv
524.636 238.768 524.351 239.518 523.781 240.155 cv
523.211 240.793 522.537 241.111 521.76 241.111 cv
520.981 241.111 520.313 240.797 519.752 240.169 cv
cp
527.854 244.238 mo
529.525 242.506 530.361 240.399 530.361 237.919 cv
530.361 235.458 529.525 233.356 527.854 231.615 cv
526.184 229.875 524.16 229.003 521.787 229.003 cv
519.395 229.003 517.363 229.864 515.691 231.588 cv
514.021 233.312 513.186 235.421 513.186 237.919 cv
513.186 240.417 514.017 242.528 515.678 244.252 cv
517.34 245.975 519.376 246.836 521.787 246.836 cv
524.16 246.836 526.184 245.97 527.854 244.238 cv
cp
f
545.222 233.061 mo
545.377 232.58 545.455 232.146 545.455 231.761 cv
545.455 230.882 545.148 230.157 544.537 229.586 cv
543.925 229.015 543.163 228.729 542.25 228.729 cv
541.5 228.729 540.829 228.954 540.236 229.402 cv
539.643 229.85 539.008 230.636 538.332 231.761 cv
519.807 264.413 li
519.534 264.872 519.327 265.336 519.182 265.803 cv
519.037 266.27 518.965 266.742 518.965 267.218 cv
518.965 268.118 519.264 268.868 519.863 269.468 cv
520.463 270.067 521.207 270.367 522.097 270.367 cv
522.805 270.367 523.477 270.115 524.112 269.611 cv
524.747 269.106 525.374 268.324 525.991 267.263 cv
544.496 234.597 li
544.824 234.054 545.066 233.542 545.222 233.061 cv
cp
f
544.729 263.234 mo
544.171 263.862 543.5 264.176 542.715 264.176 cv
541.93 264.176 541.254 263.862 540.688 263.234 cv
540.122 262.606 539.839 261.862 539.839 260.999 cv
539.839 260.098 540.117 259.338 540.675 258.72 cv
541.231 258.103 541.911 257.793 542.715 257.793 cv
543.5 257.793 544.171 258.103 544.729 258.72 cv
545.286 259.338 545.564 260.098 545.564 260.999 cv
545.564 261.862 545.286 262.606 544.729 263.234 cv
cp
542.715 252.068 mo
540.322 252.068 538.291 252.931 536.62 254.656 cv
534.949 256.383 534.114 258.496 534.114 260.998 cv
534.114 263.5 534.944 265.609 536.606 267.326 cv
538.268 269.043 540.305 269.901 542.715 269.901 cv
545.089 269.901 547.112 269.033 548.783 267.299 cv
550.454 265.563 551.289 263.464 551.289 260.998 cv
551.289 258.515 550.454 256.405 548.783 254.671 cv
547.112 252.936 545.089 252.068 542.715 252.068 cv
cp
f
300 182.906 mo
260.874 182.906 229.042 151.075 229.042 111.948 cv
229.042 72.8208 260.874 40.9888 300 40.9888 cv
339.126 40.9888 370.959 72.8208 370.959 111.948 cv
370.959 151.075 339.126 182.906 300 182.906 cv
cp
300 31.2212 mo
255.487 31.2212 219.273 67.4351 219.273 111.948 cv
219.273 156.46 255.487 192.674 300 192.674 cv
344.513 192.674 380.727 156.46 380.727 111.948 cv
380.727 67.4351 344.513 31.2212 300 31.2212 cv
cp
f
285.39 75.0967 mo
284.894 75.0967 284.496 75.2354 284.194 75.5117 cv
283.893 75.7881 283.624 76.2803 283.389 76.9883 cv
279.91 86.9346 li
276.164 76.8418 li
275.928 76.207 275.669 75.7573 275.389 75.4932 cv
275.108 75.229 274.748 75.0967 274.309 75.0967 cv
273.707 75.0967 273.207 75.2876 272.808 75.6699 cv
272.409 76.0527 272.209 76.5322 272.209 77.1104 cv
272.209 77.3135 272.23 77.5146 272.271 77.7144 cv
272.311 77.9141 272.368 78.0986 272.441 78.2695 cv
277.86 91.8647 li
278.088 92.4097 278.351 92.8003 278.647 93.0366 cv
278.944 93.2725 279.325 93.3906 279.789 93.3906 cv
280.285 93.3906 280.691 93.2603 281.009 93 cv
281.326 92.7393 281.603 92.3086 281.839 91.7061 cv
287.086 78.3672 li
287.175 78.1396 287.243 77.9053 287.288 77.6655 cv
287.333 77.4258 287.355 77.1914 287.355 76.9639 cv
287.355 76.3857 287.18 75.9307 286.83 75.5967 cv
286.48 75.2632 286 75.0967 285.39 75.0967 cv
cp
f
298.155 89.7534 mo
297.683 89.4443 296.959 89.29 295.983 89.29 cv
292.566 89.29 li
292.566 85.958 li
295.41 85.958 li
296.377 85.958 297.1 85.8057 297.576 85.5005 cv
298.052 85.1953 298.29 84.7256 298.29 84.0908 cv
298.29 83.4561 298.052 82.9844 297.576 82.6753 cv
297.1 82.3657 296.377 82.2114 295.41 82.2114 cv
292.566 82.2114 li
292.566 79.0386 li
295.861 79.0386 li
296.829 79.0386 297.551 78.8843 298.027 78.5747 cv
298.503 78.2651 298.741 77.7979 298.741 77.1714 cv
298.741 76.5288 298.501 76.0503 298.021 75.7373 cv
297.542 75.4243 296.821 75.2676 295.861 75.2676 cv
291.309 75.2676 li
290.275 75.2676 289.552 75.4707 289.137 75.8774 cv
288.722 76.2847 288.514 77.0293 288.514 78.1108 cv
288.514 90.4858 li
288.514 91.4702 288.709 92.1411 289.1 92.4995 cv
289.491 92.8574 290.21 93.0366 291.26 93.0366 cv
295.983 93.0366 li
296.959 93.0366 297.683 92.8818 298.155 92.5728 cv
298.628 92.2632 298.863 91.7915 298.863 91.1572 cv
298.863 90.5303 298.628 90.063 298.155 89.7534 cv
cp
f
314.229 82.3335 mo
311.251 82.3335 li
310.283 82.3335 309.566 82.4902 309.104 82.8032 cv
308.64 83.1162 308.407 83.5947 308.407 84.2373 cv
308.407 84.8799 308.637 85.354 309.097 85.6592 cv
309.557 85.9644 310.274 86.1167 311.251 86.1167 cv
312.679 86.1167 li
312.654 87.207 312.316 88.0757 311.666 88.7222 cv
311.016 89.3691 310.152 89.6924 309.078 89.6924 cv
307.728 89.6924 306.65 89.1841 305.845 88.167 cv
305.039 87.1499 304.637 85.7832 304.637 84.0664 cv
304.637 82.3745 305.037 81.042 305.839 80.0698 cv
306.641 79.0977 307.728 78.6113 309.104 78.6113 cv
310.021 78.6113 311.003 78.8999 312.044 79.4775 cv
313.085 80.0557 313.757 80.3442 314.058 80.3442 cv
314.521 80.3442 314.925 80.1533 315.266 79.7705 cv
315.607 79.3882 315.778 78.9453 315.778 78.4404 cv
315.778 77.4722 315.142 76.6143 313.869 75.8652 cv
312.596 75.1167 311.052 74.7427 309.237 74.7427 cv
306.495 74.7427 304.313 75.5908 302.689 77.2871 cv
301.066 78.9834 300.254 81.2676 300.254 84.1396 cv
300.254 86.9224 301.048 89.188 302.635 90.9375 cv
304.222 92.687 306.264 93.561 308.762 93.561 cv
311.242 93.561 313.246 92.7739 314.771 91.1997 cv
316.297 89.6255 317.061 87.5732 317.061 85.043 cv
317.061 84.083 316.841 83.3911 316.401 82.9683 cv
315.962 82.5454 315.238 82.3335 314.229 82.3335 cv
cp
f
323.235 85.958 mo
325.432 79.3682 li
327.482 85.958 li
323.235 85.958 li
cp
333.011 90.1318 mo
328.508 77.3667 li
328.23 76.6021 327.839 76.0181 327.33 75.6152 cv
326.82 75.2124 326.222 75.0112 325.529 75.0112 cv
324.798 75.0112 324.181 75.2227 323.681 75.6455 cv
323.181 76.0684 322.763 76.7319 322.43 77.6348 cv
317.805 90.1929 li
317.74 90.356 317.691 90.5347 317.658 90.73 cv
317.625 90.9253 317.609 91.1367 317.609 91.3643 cv
317.609 91.9258 317.79 92.3916 318.152 92.7617 cv
318.515 93.1323 318.977 93.3174 319.537 93.3174 cv
319.977 93.3174 320.361 93.1602 320.69 92.8472 cv
321.021 92.5342 321.282 92.0801 321.478 91.4863 cv
322.088 89.6924 li
328.654 89.6924 li
329.154 91.3398 li
329.358 92.0068 329.633 92.5039 329.979 92.8291 cv
330.323 93.1543 330.757 93.3174 331.277 93.3174 cv
331.863 93.3174 332.343 93.1401 332.718 92.7861 cv
333.093 92.4326 333.279 91.9746 333.279 91.4131 cv
333.279 91.2505 333.257 91.0635 333.212 90.8521 cv
333.167 90.6401 333.1 90.4004 333.011 90.1318 cv
cp
f
348.327 75.0356 mo
347.644 75.0356 347.135 75.2734 346.801 75.7495 cv
346.468 76.2256 346.301 76.9473 346.301 77.9155 cv
346.301 86.2388 li
338.832 76.3657 li
338.466 75.894 338.118 75.5586 337.789 75.3589 cv
337.459 75.1592 337.091 75.0601 336.685 75.0601 cv
336.05 75.0601 335.577 75.2837 335.269 75.7314 cv
334.96 76.1787 334.805 76.8584 334.805 77.769 cv
334.805 90.3882 li
334.805 91.3564 334.972 92.0767 335.305 92.5483 cv
335.639 93.02 336.147 93.2563 336.83 93.2563 cv
337.514 93.2563 338.022 93.02 338.356 92.5483 cv
338.689 92.0767 338.856 91.3564 338.856 90.3882 cv
338.856 82.2114 li
346.179 91.8892 li
346.569 92.4019 346.947 92.7759 347.313 93.0122 cv
347.68 93.248 348.074 93.3662 348.498 93.3662 cv
349.132 93.3662 349.6 93.1602 349.901 92.7495 cv
350.202 92.3389 350.353 91.7021 350.353 90.8398 cv
350.353 77.9155 li
350.353 76.9473 350.186 76.2256 349.853 75.7495 cv
349.52 75.2734 349.01 75.0356 348.327 75.0356 cv
cp
f
249.263 83.8101 mo
247.792 87.4854 238.695 111.38 251.355 136.743 cv
264.754 163.586 291.558 170.103 295.122 170.904 cv
293.303 167.542 291.64 164.086 290.099 160.582 cv
289.307 158.774 288.564 156.947 287.825 155.13 cv
285.691 149.689 li
284.3 146.08 282.831 142.583 281.195 139.123 cv
279.557 135.671 277.793 132.269 275.895 128.926 cv
272.11 122.227 267.802 115.791 263.323 109.312 cv
269.362 114.373 274.682 120.302 279.265 126.79 cv
281.557 130.035 283.626 133.446 285.503 136.965 cv
286.436 138.728 287.307 140.523 288.135 142.339 cv
288.951 144.161 289.701 146.002 290.431 147.832 cv
294.566 158.747 li
295.825 162.032 297.147 165.29 298.509 168.543 cv
299.686 160.063 301.394 137.758 290.762 118.475 cv
277.325 94.1025 249.263 83.8101 249.263 83.8101 cv
cp
f
313.676 128.363 mo
303.973 144.429 304.832 163.528 305.548 170.435 cv
305.941 169.544 306.341 168.655 306.725 167.76 cv
310.557 158.737 li
311.229 157.227 311.92 155.706 312.665 154.205 cv
313.42 152.708 314.211 151.23 315.052 149.782 cv
316.743 146.892 318.593 144.098 320.623 141.451 cv
324.685 136.158 329.345 131.359 334.58 127.312 cv
330.607 132.6 326.778 137.858 323.38 143.354 cv
321.677 146.097 320.084 148.893 318.595 151.735 cv
317.107 154.584 315.759 157.471 314.472 160.453 cv
312.501 164.948 li
311.82 166.449 311.138 167.957 310.413 169.448 cv
310.023 170.246 309.625 171.04 309.221 171.831 cv
316.208 168.927 332.542 160.818 341.861 145.386 cv
353.945 125.38 349.647 100.649 349.647 100.649 cv
349.647 100.649 325.759 108.356 313.676 128.363 cv
cp
f
117.726 182.906 mo
78.5996 182.906 46.7681 151.075 46.7681 111.948 cv
46.7681 72.8208 78.5996 40.9888 117.726 40.9888 cv
156.853 40.9888 188.685 72.8208 188.685 111.948 cv
188.685 151.075 156.853 182.906 117.726 182.906 cv
cp
117.726 31.2212 mo
73.2134 31.2212 37 67.4351 37 111.948 cv
37 156.46 73.2134 192.674 117.726 192.674 cv
162.24 192.674 198.453 156.46 198.453 111.948 cv
198.453 67.4351 162.24 31.2212 117.726 31.2212 cv
cp
f
78.4995 62.6045 mo
77.3047 65.5898 69.9155 84.998 80.1987 105.599 cv
91.082 127.402 112.853 132.695 115.748 133.346 cv
114.27 130.615 112.919 127.808 111.668 124.962 cv
111.024 123.493 110.422 122.01 109.821 120.533 cv
108.088 116.114 li
106.958 113.183 105.765 110.342 104.437 107.532 cv
103.105 104.728 101.673 101.965 100.131 99.249 cv
97.0566 93.8081 93.5571 88.5801 89.9194 83.3179 cv
94.8242 87.4287 99.1455 92.2451 102.868 97.5146 cv
104.729 100.15 106.41 102.921 107.935 105.779 cv
108.692 107.21 109.4 108.669 110.072 110.145 cv
110.736 111.624 111.345 113.119 111.938 114.605 cv
115.296 123.471 li
116.319 126.14 117.393 128.786 118.5 131.429 cv
119.455 124.54 120.842 106.423 112.207 90.7607 cv
101.292 70.9644 78.4995 62.6045 78.4995 62.6045 cv
cp
f
130.818 98.7925 mo
122.937 111.841 123.635 127.355 124.216 132.964 cv
124.536 132.241 124.86 131.52 125.172 130.792 cv
128.285 123.464 li
128.832 122.236 129.392 121.001 129.998 119.782 cv
130.61 118.566 131.252 117.366 131.936 116.189 cv
133.31 113.842 134.812 111.573 136.461 109.422 cv
139.76 105.124 143.545 101.226 147.797 97.9385 cv
144.57 102.234 141.461 106.505 138.701 110.969 cv
137.317 113.196 136.023 115.468 134.813 117.776 cv
133.606 120.09 132.51 122.435 131.465 124.857 cv
129.864 128.508 li
129.311 129.727 128.756 130.952 128.168 132.163 cv
127.852 132.812 127.528 133.456 127.199 134.099 cv
132.875 131.74 146.142 125.154 153.712 112.619 cv
163.526 96.3691 160.036 76.2817 160.036 76.2817 cv
160.036 76.2817 140.633 82.542 130.818 98.7925 cv
cp
f
117.726 31.2212 mo
73.2134 31.2212 37 67.4351 37 111.948 cv
37 122.041 38.8672 131.704 42.2651 140.618 cv
52.8247 140.618 li
48.9341 131.846 46.7681 122.146 46.7681 111.948 cv
46.7681 72.8208 78.5996 40.9888 117.726 40.9888 cv
156.853 40.9888 188.685 72.8208 188.685 111.948 cv
188.685 122.146 186.519 131.846 182.628 140.618 cv
193.188 140.618 li
196.586 131.704 198.453 122.041 198.453 111.948 cv
198.453 67.4351 162.24 31.2212 117.726 31.2212 cv
cp
f
129.681 160.372 mo
133.928 160.372 li
131.877 153.782 li
129.681 160.372 li
cp
f
156.798 165.254 mo
156.798 166.116 156.648 166.753 156.346 167.164 cv
156.045 167.574 155.578 167.78 154.943 167.78 cv
154.52 167.78 154.125 167.662 153.759 167.426 cv
153.393 167.19 153.015 166.816 152.624 166.303 cv
145.302 156.625 li
145.302 164.802 li
145.302 165.771 145.135 166.491 144.801 166.962 cv
144.468 167.434 143.959 167.67 143.276 167.67 cv
142.592 167.67 142.083 167.434 141.75 166.962 cv
141.417 166.491 141.25 165.771 141.25 164.802 cv
141.25 152.183 li
141.25 151.272 141.405 150.593 141.714 150.146 cv
142.022 149.698 142.495 149.474 143.129 149.474 cv
143.536 149.474 143.904 149.573 144.234 149.773 cv
144.563 149.973 144.911 150.308 145.277 150.78 cv
152.746 160.653 li
152.746 152.33 li
152.746 151.361 152.914 150.64 153.247 150.164 cv
153.58 149.688 154.089 149.45 154.772 149.45 cv
155.456 149.45 155.964 149.688 156.298 150.164 cv
156.631 150.64 156.798 151.361 156.798 152.33 cv
156.798 165.254 li
cp
139.163 167.2 mo
138.789 167.554 138.309 167.731 137.723 167.731 cv
137.202 167.731 136.769 167.568 136.423 167.243 cv
136.078 166.918 135.803 166.421 135.6 165.754 cv
135.099 164.106 li
128.533 164.106 li
127.923 165.9 li
127.728 166.494 127.466 166.948 127.136 167.261 cv
126.807 167.574 126.422 167.731 125.983 167.731 cv
125.421 167.731 124.96 167.546 124.598 167.176 cv
124.235 166.806 124.055 166.34 124.055 165.779 cv
124.055 165.551 124.07 165.339 124.104 165.144 cv
124.136 164.949 124.185 164.77 124.25 164.607 cv
128.875 152.049 li
129.208 151.146 129.626 150.482 130.126 150.06 cv
130.626 149.637 131.243 149.425 131.975 149.425 cv
132.667 149.425 133.266 149.626 133.775 150.029 cv
134.284 150.432 134.676 151.016 134.953 151.781 cv
139.456 164.546 li
139.545 164.814 139.612 165.054 139.657 165.266 cv
139.703 165.478 139.725 165.665 139.725 165.827 cv
139.725 166.389 139.538 166.847 139.163 167.2 cv
cp
121.217 165.614 mo
119.691 167.188 117.688 167.975 115.207 167.975 cv
112.708 167.975 110.667 167.101 109.08 165.352 cv
107.493 163.602 106.7 161.336 106.7 158.554 cv
106.7 155.682 107.511 153.397 109.135 151.701 cv
110.758 150.005 112.94 149.157 115.683 149.157 cv
117.498 149.157 119.041 149.531 120.314 150.279 cv
121.587 151.028 122.224 151.886 122.224 152.854 cv
122.224 153.359 122.053 153.802 121.711 154.185 cv
121.37 154.567 120.967 154.758 120.503 154.758 cv
120.202 154.758 119.531 154.47 118.49 153.892 cv
117.449 153.314 116.467 153.025 115.548 153.025 cv
114.173 153.025 113.085 153.512 112.284 154.484 cv
111.482 155.456 111.082 156.789 111.082 158.48 cv
111.082 160.197 111.484 161.564 112.29 162.581 cv
113.095 163.598 114.173 164.106 115.524 164.106 cv
116.598 164.106 117.461 163.783 118.111 163.136 cv
118.762 162.49 119.1 161.621 119.124 160.531 cv
117.696 160.531 li
116.72 160.531 116.002 160.378 115.542 160.073 cv
115.082 159.768 114.853 159.294 114.853 158.651 cv
114.853 158.009 115.084 157.53 115.548 157.217 cv
116.012 156.904 116.729 156.748 117.696 156.748 cv
120.674 156.748 li
121.684 156.748 122.407 156.959 122.846 157.382 cv
123.286 157.805 123.505 158.497 123.505 159.457 cv
123.505 161.987 122.743 164.04 121.217 165.614 cv
cp
104.601 166.987 mo
104.128 167.296 103.405 167.451 102.429 167.451 cv
97.7056 167.451 li
96.6558 167.451 95.936 167.272 95.5454 166.914 cv
95.1548 166.555 94.9595 165.884 94.9595 164.9 cv
94.9595 152.525 li
94.9595 151.443 95.167 150.699 95.582 150.292 cv
95.9971 149.885 96.7207 149.682 97.7544 149.682 cv
102.307 149.682 li
103.267 149.682 103.987 149.838 104.467 150.151 cv
104.946 150.464 105.187 150.943 105.187 151.585 cv
105.187 152.212 104.949 152.679 104.473 152.989 cv
103.997 153.298 103.274 153.453 102.307 153.453 cv
99.0112 153.453 li
99.0112 156.625 li
101.855 156.625 li
102.823 156.625 103.545 156.78 104.021 157.089 cv
104.497 157.399 104.735 157.87 104.735 158.505 cv
104.735 159.14 104.497 159.609 104.021 159.915 cv
103.545 160.22 102.823 160.372 101.855 160.372 cv
99.0112 160.372 li
99.0112 163.704 li
102.429 163.704 li
103.405 163.704 104.128 163.858 104.601 164.167 cv
105.073 164.477 105.309 164.944 105.309 165.571 cv
105.309 166.206 105.073 166.677 104.601 166.987 cv
cp
93.7329 152.08 mo
93.688 152.319 93.6206 152.554 93.5317 152.781 cv
88.2842 166.12 li
88.0483 166.723 87.7715 167.153 87.4541 167.414 cv
87.1367 167.674 86.7305 167.805 86.2339 167.805 cv
85.77 167.805 85.3892 167.687 85.0928 167.451 cv
84.7959 167.214 84.5337 166.824 84.3057 166.279 cv
78.8867 152.684 li
78.8135 152.513 78.7563 152.328 78.7158 152.128 cv
78.6758 151.929 78.6553 151.728 78.6553 151.524 cv
78.6553 150.946 78.854 150.467 79.2529 150.084 cv
79.6523 149.702 80.1523 149.511 80.7539 149.511 cv
81.1934 149.511 81.5537 149.643 81.834 149.907 cv
82.1147 150.171 82.3735 150.621 82.6094 151.256 cv
86.356 161.349 li
89.834 151.402 li
90.0693 150.694 90.3379 150.202 90.6396 149.926 cv
90.9409 149.649 91.3389 149.511 91.8354 149.511 cv
92.4453 149.511 92.9253 149.677 93.2754 150.011 cv
93.626 150.345 93.8003 150.8 93.8003 151.378 cv
93.8003 151.605 93.7783 151.84 93.7329 152.08 cv
cp
52.8247 140.618 mo
42.2651 140.618 li
53.854 171.018 83.3062 192.674 117.726 192.674 cv
152.146 192.674 181.599 171.018 193.188 140.618 cv
182.628 140.618 li
52.8247 140.618 li
cp
f
482.273 31.2212 mo
437.689 31.2212 401.547 67.3633 401.547 111.947 cv
401.547 156.531 437.689 192.674 482.273 192.674 cv
526.857 192.674 563 156.531 563 111.947 cv
563 67.3633 526.857 31.2212 482.273 31.2212 cv
cp
f
497.834 123.32 mo
484.575 144.93 485.494 170.234 486.745 179.444 cv
487.335 178.256 487.93 177.07 488.5 175.874 cv
490.393 171.858 492.256 167.834 494.088 163.804 cv
495.056 161.778 496.039 159.738 497.098 157.72 cv
498.169 155.708 499.285 153.716 500.465 151.76 cv
502.841 147.855 505.412 144.063 508.206 140.439 cv
513.798 133.195 520.097 126.514 527.083 120.679 cv
521.966 128.051 516.879 135.313 512.275 142.818 cv
509.967 146.564 507.783 150.364 505.721 154.212 cv
503.662 158.069 501.773 161.96 499.951 165.972 cv
499.021 167.988 498.081 170.001 497.135 172.014 cv
496.152 174.029 495.159 176.054 494.094 178.054 cv
493.521 179.125 492.934 180.189 492.333 181.249 cv
502.929 177.363 527.33 165.567 539.131 143.934 cv
554.287 115.96 544.631 83.6997 544.868 83.7168 cv
544.858 83.8765 514.366 96.5977 497.834 123.32 cv
cp
1 1 1 rgb
f
419.679 83.7168 mo
419.917 83.6997 410.26 115.96 425.416 143.934 cv
437.217 165.567 461.618 177.363 472.215 181.249 cv
471.613 180.189 471.025 179.125 470.453 178.054 cv
469.388 176.054 468.395 174.029 467.412 172.014 cv
466.466 170.001 465.527 167.988 464.596 165.972 cv
462.773 161.96 460.886 158.069 458.826 154.212 cv
456.764 150.364 454.58 146.564 452.272 142.818 cv
447.668 135.313 442.581 128.051 437.465 120.679 cv
444.45 126.514 450.749 133.195 456.341 140.439 cv
459.135 144.063 461.706 147.855 464.082 151.76 cv
465.263 153.716 466.379 155.708 467.45 157.72 cv
468.508 159.738 469.492 161.778 470.459 163.804 cv
472.292 167.834 474.154 171.858 476.048 175.874 cv
476.617 177.07 477.212 178.256 477.802 179.444 cv
479.053 170.234 479.972 144.93 466.713 123.32 cv
450.181 96.5977 419.688 83.8765 419.679 83.7168 cv
cp
f
453.095 60.3018 mo
452.535 60.3018 452.087 60.458 451.747 60.7695 cv
451.407 61.0811 451.104 61.6357 450.839 62.4336 cv
446.92 73.6426 li
442.697 62.2686 li
442.432 61.5532 442.14 61.0464 441.824 60.7485 cv
441.508 60.4512 441.102 60.3018 440.606 60.3018 cv
439.929 60.3018 439.364 60.5171 438.915 60.9482 cv
438.465 61.3794 438.241 61.9199 438.241 62.5713 cv
438.241 62.8003 438.265 63.0269 438.31 63.252 cv
438.355 63.4766 438.42 63.6851 438.502 63.8779 cv
444.608 79.1992 li
444.866 79.8135 445.162 80.2534 445.496 80.5195 cv
445.83 80.7856 446.26 80.9185 446.782 80.9185 cv
447.342 80.9185 447.8 80.772 448.157 80.4785 cv
448.515 80.1846 448.827 79.6992 449.093 79.0205 cv
455.007 63.9878 li
455.107 63.7314 455.183 63.4673 455.233 63.1968 cv
455.284 62.9268 455.31 62.6626 455.31 62.4063 cv
455.31 61.7549 455.112 61.2417 454.718 60.8657 cv
454.323 60.4893 453.782 60.3018 453.095 60.3018 cv
cp
f
467.481 76.8198 mo
466.949 76.4712 466.133 76.2974 465.033 76.2974 cv
461.182 76.2974 li
461.182 72.5425 li
464.387 72.5425 li
465.478 72.5425 466.291 72.3706 466.828 72.0269 cv
467.364 71.6826 467.633 71.1533 467.633 70.438 cv
467.633 69.7231 467.364 69.1914 466.828 68.8428 cv
466.291 68.4941 465.478 68.3203 464.387 68.3203 cv
461.182 68.3203 li
461.182 64.7441 li
464.896 64.7441 li
465.986 64.7441 466.801 64.5703 467.337 64.2217 cv
467.873 63.873 468.142 63.3462 468.142 62.6396 cv
468.142 61.9155 467.87 61.3765 467.33 61.0239 cv
466.789 60.6709 465.978 60.4941 464.896 60.4941 cv
459.766 60.4941 li
458.601 60.4941 457.785 60.7231 457.317 61.1821 cv
456.85 61.6406 456.615 62.4795 456.615 63.6987 cv
456.615 77.645 li
456.615 78.7544 456.836 79.5107 457.276 79.9146 cv
457.716 80.3184 458.527 80.5195 459.71 80.5195 cv
465.033 80.5195 li
466.133 80.5195 466.949 80.3457 467.481 79.9971 cv
468.014 79.6484 468.279 79.1167 468.279 78.4014 cv
468.279 77.6953 468.014 77.1685 467.481 76.8198 cv
cp
f
485.596 68.4575 mo
482.239 68.4575 li
481.148 68.4575 480.342 68.6343 479.818 68.9873 cv
479.296 69.3398 479.035 69.8789 479.035 70.603 cv
479.035 71.3271 479.293 71.8618 479.812 72.2056 cv
480.33 72.5493 481.139 72.7212 482.239 72.7212 cv
483.849 72.7212 li
483.821 73.9502 483.44 74.9287 482.707 75.6577 cv
481.974 76.3867 481.002 76.751 479.791 76.751 cv
478.269 76.751 477.055 76.1782 476.146 75.0317 cv
475.239 73.8857 474.785 72.3452 474.785 70.4106 cv
474.785 68.5039 475.236 67.002 476.14 65.9063 cv
477.043 64.811 478.269 64.2627 479.818 64.2627 cv
480.854 64.2627 481.96 64.5879 483.134 65.2393 cv
484.307 65.8906 485.063 66.2158 485.402 66.2158 cv
485.926 66.2158 486.379 66.0005 486.765 65.5693 cv
487.149 65.1382 487.342 64.6392 487.342 64.0703 cv
487.342 62.979 486.624 62.0122 485.189 61.168 cv
483.755 60.3242 482.016 59.9028 479.97 59.9028 cv
476.88 59.9028 474.421 60.8589 472.592 62.7705 cv
470.762 64.6821 469.847 67.2563 469.847 70.4932 cv
469.847 73.6289 470.74 76.1826 472.529 78.1538 cv
474.317 80.1255 476.618 81.1108 479.434 81.1108 cv
482.229 81.1108 484.488 80.2236 486.207 78.4497 cv
487.927 76.6753 488.786 74.3628 488.786 71.5107 cv
488.786 70.4292 488.539 69.6494 488.044 69.1729 cv
487.549 68.6963 486.732 68.4575 485.596 68.4575 cv
cp
f
495.745 72.5425 mo
498.221 65.1157 li
500.532 72.5425 li
495.745 72.5425 li
cp
506.762 77.2461 mo
501.688 62.8599 li
501.375 61.998 500.934 61.3403 500.359 60.8862 cv
499.786 60.4326 499.111 60.2056 498.331 60.2056 cv
497.506 60.2056 496.812 60.4443 496.248 60.9209 cv
495.684 61.3975 495.213 62.1445 494.838 63.1626 cv
489.625 77.3149 li
489.553 77.4985 489.497 77.7002 489.46 77.9199 cv
489.423 78.1401 489.405 78.3789 489.405 78.6353 cv
489.405 79.2681 489.608 79.793 490.018 80.21 cv
490.426 80.6274 490.945 80.8359 491.578 80.8359 cv
492.073 80.8359 492.507 80.6592 492.878 80.3066 cv
493.249 79.9536 493.545 79.4419 493.765 78.7729 cv
494.453 76.751 li
501.853 76.751 li
502.416 78.6079 li
502.646 79.3594 502.955 79.9194 503.345 80.2856 cv
503.733 80.6523 504.222 80.8359 504.81 80.8359 cv
505.47 80.8359 506.01 80.6367 506.432 80.2378 cv
506.854 79.8389 507.064 79.3232 507.064 78.6904 cv
507.064 78.5068 507.04 78.2964 506.989 78.0576 cv
506.938 77.8193 506.862 77.5488 506.762 77.2461 cv
cp
f
524.023 60.2329 mo
523.253 60.2329 522.68 60.501 522.304 61.0376 cv
521.929 61.5742 521.74 62.3877 521.74 63.479 cv
521.74 72.8589 li
513.322 61.7319 li
512.91 61.2007 512.519 60.8223 512.146 60.5977 cv
511.775 60.3726 511.36 60.2607 510.902 60.2607 cv
510.187 60.2607 509.654 60.5127 509.307 61.0171 cv
508.959 61.521 508.784 62.2871 508.784 63.314 cv
508.784 77.5352 li
508.784 78.6265 508.973 79.438 509.348 79.9697 cv
509.724 80.501 510.297 80.7671 511.067 80.7671 cv
511.837 80.7671 512.411 80.501 512.786 79.9697 cv
513.162 79.438 513.351 78.6265 513.351 77.5352 cv
513.351 68.3203 li
521.603 79.2266 li
522.043 79.8047 522.469 80.2261 522.882 80.4922 cv
523.294 80.7583 523.738 80.8911 524.216 80.8911 cv
524.931 80.8911 525.457 80.6592 525.797 80.1963 cv
526.137 79.7334 526.307 79.0156 526.307 78.0439 cv
526.307 63.479 li
526.307 62.3877 526.118 61.5742 525.742 61.0376 cv
525.367 60.501 524.793 60.2329 524.023 60.2329 cv
cp
f
71.9385 430.482 mo
70.9087 430.482 70.0835 430.77 69.458 431.343 cv
68.833 431.916 68.2759 432.938 67.7876 434.405 cv
60.5737 455.035 li
52.8032 434.102 li
52.3145 432.785 51.7778 431.853 51.1958 431.305 cv
50.6133 430.757 49.8667 430.482 48.9556 430.482 cv
47.708 430.482 46.6699 430.879 45.8423 431.672 cv
45.0146 432.466 44.6021 433.46 44.6021 434.658 cv
44.6021 435.08 44.645 435.498 44.7285 435.912 cv
44.812 436.325 44.9312 436.709 45.083 437.063 cv
56.3213 465.261 li
56.7949 466.391 57.3389 467.201 57.9541 467.69 cv
58.5688 468.181 59.3589 468.425 60.3208 468.425 cv
61.3506 468.425 62.1938 468.155 62.8516 467.614 cv
63.5098 467.074 64.0845 466.181 64.5732 464.932 cv
75.457 437.266 li
75.6416 436.794 75.7813 436.308 75.8745 435.811 cv
75.9683 435.313 76.0137 434.827 76.0137 434.355 cv
76.0137 433.156 75.6519 432.212 74.9253 431.52 cv
74.1992 430.828 73.2041 430.482 71.9385 430.482 cv
cp
.180392 .490196 .196078 rgb
f
98.415 460.882 mo
97.4351 460.24 95.9341 459.92 93.9092 459.92 cv
86.8223 459.92 li
86.8223 453.01 li
92.7197 453.01 li
94.7271 453.01 96.2256 452.693 97.2124 452.061 cv
98.1997 451.428 98.6934 450.453 98.6934 449.137 cv
98.6934 447.82 98.1997 446.843 97.2124 446.201 cv
96.2256 445.56 94.7271 445.239 92.7197 445.239 cv
86.8223 445.239 li
86.8223 438.658 li
93.6563 438.658 li
95.6636 438.658 97.1621 438.338 98.1489 437.696 cv
99.1362 437.055 99.6299 436.085 99.6299 434.785 cv
99.6299 433.452 99.1309 432.46 98.1362 431.812 cv
97.1416 431.162 95.6484 430.837 93.6563 430.837 cv
84.2148 430.837 li
82.0708 430.837 80.5698 431.258 79.7095 432.103 cv
78.8486 432.946 78.4185 434.49 78.4185 436.734 cv
78.4185 462.4 li
78.4185 464.441 78.8232 465.834 79.6333 466.577 cv
80.4434 467.319 81.937 467.69 84.1138 467.69 cv
93.9092 467.69 li
95.9341 467.69 97.4351 467.37 98.415 466.729 cv
99.3945 466.087 99.8828 465.108 99.8828 463.793 cv
99.8828 462.493 99.3945 461.523 98.415 460.882 cv
cp
f
131.751 445.492 mo
125.576 445.492 li
123.568 445.492 122.083 445.817 121.121 446.467 cv
120.159 447.116 119.678 448.108 119.678 449.44 cv
119.678 450.773 120.154 451.757 121.108 452.39 cv
122.063 453.022 123.551 453.339 125.576 453.339 cv
128.537 453.339 li
128.486 455.601 127.785 457.401 126.436 458.743 cv
125.087 460.084 123.297 460.755 121.07 460.755 cv
118.268 460.755 116.033 459.701 114.362 457.591 cv
112.692 455.481 111.856 452.646 111.856 449.086 cv
111.856 445.577 112.687 442.813 114.35 440.797 cv
116.013 438.78 118.268 437.772 121.121 437.772 cv
123.027 437.772 125.062 438.371 127.221 439.569 cv
129.38 440.768 130.772 441.366 131.397 441.366 cv
132.359 441.366 133.194 440.971 133.903 440.177 cv
134.612 439.383 134.966 438.465 134.966 437.418 cv
134.966 435.409 133.645 433.63 131.005 432.077 cv
128.365 430.524 125.163 429.748 121.399 429.748 cv
115.711 429.748 111.186 431.508 107.819 435.025 cv
104.452 438.544 102.769 443.281 102.769 449.238 cv
102.769 455.01 104.414 459.709 107.706 463.337 cv
110.996 466.966 115.23 468.779 120.412 468.779 cv
125.558 468.779 129.714 467.146 132.878 463.881 cv
136.042 460.616 137.624 456.359 137.624 451.111 cv
137.624 449.121 137.168 447.686 136.257 446.809 cv
135.346 445.932 133.845 445.492 131.751 445.492 cv
cp
f
150.432 453.01 mo
154.988 439.342 li
159.24 453.01 li
150.432 453.01 li
cp
170.707 461.666 mo
161.366 435.19 li
160.792 433.604 159.979 432.394 158.924 431.558 cv
157.868 430.723 156.625 430.305 155.19 430.305 cv
153.672 430.305 152.394 430.744 151.355 431.621 cv
150.318 432.498 149.452 433.874 148.761 435.747 cv
139.168 461.793 li
139.034 462.131 138.933 462.502 138.864 462.906 cv
138.796 463.312 138.763 463.751 138.763 464.223 cv
138.763 465.387 139.138 466.353 139.89 467.121 cv
140.641 467.89 141.598 468.272 142.762 468.272 cv
143.673 468.272 144.471 467.947 145.154 467.298 cv
145.838 466.649 146.382 465.707 146.787 464.476 cv
148.052 460.755 li
161.67 460.755 li
162.708 464.172 li
163.131 465.556 163.7 466.586 164.417 467.26 cv
165.133 467.935 166.031 468.272 167.112 468.272 cv
168.327 468.272 169.322 467.905 170.099 467.172 cv
170.876 466.438 171.263 465.488 171.263 464.324 cv
171.263 463.986 171.218 463.599 171.124 463.16 cv
171.03 462.721 170.891 462.224 170.707 461.666 cv
cp
f
202.473 430.355 mo
201.055 430.355 200 430.85 199.309 431.836 cv
198.618 432.823 198.271 434.32 198.271 436.329 cv
198.271 453.592 li
182.78 433.114 li
182.021 432.137 181.299 431.44 180.616 431.026 cv
179.933 430.612 179.168 430.406 178.325 430.406 cv
177.009 430.406 176.029 430.871 175.389 431.799 cv
174.749 432.727 174.427 434.136 174.427 436.025 cv
174.427 462.198 li
174.427 464.206 174.774 465.7 175.465 466.678 cv
176.156 467.656 177.211 468.146 178.629 468.146 cv
180.046 468.146 181.102 467.656 181.793 466.678 cv
182.484 465.7 182.831 464.206 182.831 462.198 cv
182.831 445.239 li
198.018 465.312 li
198.828 466.374 199.612 467.15 200.372 467.64 cv
201.131 468.13 201.949 468.374 202.827 468.374 cv
204.144 468.374 205.113 467.947 205.738 467.096 cv
206.363 466.244 206.674 464.923 206.674 463.135 cv
206.674 436.329 li
206.674 434.32 206.328 432.823 205.637 431.836 cv
204.946 430.85 203.89 430.355 202.473 430.355 cv
cp
f
163.617 372.816 mo
153.673 390.852 155.27 411.713 156.371 419.646 cv
157.645 416.603 158.882 413.555 160.06 410.482 cv
163.927 400.273 li
164.61 398.563 165.311 396.84 166.074 395.137 cv
166.849 393.438 167.664 391.759 168.536 390.109 cv
170.292 386.819 172.227 383.629 174.37 380.594 cv
178.657 374.525 183.633 368.979 189.28 364.246 cv
185.092 370.306 181.063 376.326 177.522 382.591 cv
175.747 385.718 174.097 388.899 172.564 392.128 cv
171.035 395.364 169.66 398.635 168.359 402.011 cv
166.364 407.1 li
165.672 408.8 164.979 410.508 164.237 412.199 cv
162.796 415.477 161.241 418.708 159.539 421.854 cv
162.873 421.104 187.942 415.009 200.474 389.902 cv
212.315 366.181 203.807 343.832 202.431 340.395 cv
202.431 340.395 176.185 350.021 163.617 372.816 cv
cp
f
108.542 356.145 mo
108.542 356.145 104.522 379.274 115.824 397.986 cv
124.541 412.42 139.817 420.004 146.353 422.72 cv
145.974 421.98 145.602 421.237 145.238 420.491 cv
144.56 419.097 143.921 417.686 143.284 416.282 cv
141.441 412.078 li
140.238 409.289 138.976 406.59 137.585 403.925 cv
136.192 401.267 134.703 398.651 133.109 396.086 cv
129.931 390.946 126.35 386.027 122.635 381.082 cv
127.531 384.866 131.89 389.355 135.688 394.306 cv
137.587 396.781 139.317 399.395 140.899 402.098 cv
141.686 403.452 142.425 404.835 143.131 406.234 cv
143.829 407.639 144.474 409.061 145.103 410.474 cv
148.687 418.913 li
149.046 419.75 149.419 420.581 149.788 421.414 cv
150.457 414.955 151.261 397.091 142.186 382.064 cv
130.885 363.353 108.542 356.145 108.542 356.145 cv
cp
f
49.1846 405.776 mo
47.2925 405.776 li
46.3877 405.776 45.7134 405.921 45.269 406.21 cv
44.8242 406.499 44.6021 406.936 44.6021 407.521 cv
44.6021 408.099 44.8184 408.535 45.252 408.832 cv
45.6851 409.128 46.3193 409.276 47.1558 409.276 cv
47.4976 409.276 li
47.4976 419.855 li
47.4976 420.76 47.6553 421.433 47.9707 421.873 cv
48.2861 422.314 48.7666 422.535 49.4126 422.535 cv
50.0664 422.535 50.5488 422.314 50.8604 421.873 cv
51.1724 421.433 51.3281 420.76 51.3281 419.855 cv
51.3281 408.456 li
51.3281 407.49 51.1626 406.803 50.832 406.393 cv
50.5015 405.982 49.9521 405.776 49.1846 405.776 cv
cp
f
63.0698 417.958 mo
62.5381 418.896 61.8086 419.365 60.8813 419.365 cv
59.9541 419.365 59.2227 418.896 58.6865 417.958 cv
58.1509 417.02 57.8828 415.722 57.8828 414.064 cv
57.8828 412.423 58.1509 411.133 58.6865 410.194 cv
59.2227 409.256 59.9541 408.786 60.8813 408.786 cv
61.8008 408.786 62.5283 409.256 63.0645 410.194 cv
63.6001 411.133 63.8682 412.423 63.8682 414.064 cv
63.8682 415.722 63.6016 417.02 63.0698 417.958 cv
cp
60.8584 405.31 mo
58.7456 405.31 57.064 406.098 55.814 407.675 cv
54.5635 409.252 53.9385 411.39 53.9385 414.087 cv
53.9385 416.785 54.5635 418.923 55.814 420.5 cv
57.064 422.077 58.7456 422.865 60.8584 422.865 cv
62.9712 422.865 64.6548 422.077 65.9087 420.5 cv
67.1626 418.923 67.7896 416.785 67.7896 414.087 cv
67.7896 411.39 67.1626 409.252 65.9087 407.675 cv
64.6548 406.098 62.9712 405.31 60.8584 405.31 cv
cp
f
78.1978 417.958 mo
77.666 418.896 76.936 419.365 76.0088 419.365 cv
75.0815 419.365 74.3501 418.896 73.8145 417.958 cv
73.2788 417.02 73.0107 415.722 73.0107 414.064 cv
73.0107 412.423 73.2788 411.133 73.8145 410.194 cv
74.3501 409.256 75.0815 408.786 76.0088 408.786 cv
76.9282 408.786 77.6563 409.256 78.1919 410.194 cv
78.728 411.133 78.9956 412.423 78.9956 414.064 cv
78.9956 415.722 78.7295 417.02 78.1978 417.958 cv
cp
75.9863 405.31 mo
73.873 405.31 72.1919 406.098 70.9419 407.675 cv
69.6914 409.252 69.0664 411.39 69.0664 414.087 cv
69.0664 416.785 69.6914 418.923 70.9419 420.5 cv
72.1919 422.077 73.873 422.865 75.9863 422.865 cv
78.0991 422.865 79.7822 422.077 81.0361 420.5 cv
82.2905 418.923 82.9175 416.785 82.9175 414.087 cv
82.9175 411.39 82.2905 409.252 81.0361 407.675 cv
79.7822 406.098 78.0991 405.31 75.9863 405.31 cv
cp
f
86.5049 410.207 mo
86.2715 409.946 86.1548 409.632 86.1548 409.265 cv
86.1548 408.897 86.2695 408.586 86.4995 408.328 cv
86.729 408.071 87.0093 407.942 87.3408 407.942 cv
87.6719 407.942 87.9541 408.071 88.1875 408.328 cv
88.4209 408.586 88.5376 408.897 88.5376 409.265 cv
88.5376 409.624 88.4189 409.936 88.1816 410.201 cv
87.9448 410.467 87.6641 410.599 87.3408 410.599 cv
87.0166 410.599 86.7383 410.469 86.5049 410.207 cv
cp
89.877 411.9 mo
90.5723 411.18 90.9199 410.303 90.9199 409.271 cv
90.9199 408.246 90.5723 407.372 89.877 406.647 cv
89.1816 405.923 88.3398 405.561 87.3521 405.561 cv
86.3564 405.561 85.5107 405.919 84.8154 406.636 cv
84.1201 407.354 83.7725 408.231 83.7725 409.271 cv
83.7725 410.311 84.1182 411.188 84.8096 411.906 cv
85.501 412.623 86.3486 412.981 87.3521 412.981 cv
88.3398 412.981 89.1816 412.621 89.877 411.9 cv
cp
f
97.1045 407.249 mo
97.1689 407.049 97.2017 406.868 97.2017 406.708 cv
97.2017 406.342 97.0742 406.04 96.8198 405.803 cv
96.5649 405.565 96.2476 405.446 95.8677 405.446 cv
95.5562 405.446 95.2769 405.539 95.0298 405.727 cv
94.7827 405.912 94.5186 406.239 94.2373 406.708 cv
86.5278 420.297 li
86.4146 420.487 86.3281 420.681 86.2681 420.875 cv
86.2075 421.069 86.1777 421.266 86.1777 421.464 cv
86.1777 421.838 86.3022 422.15 86.5513 422.399 cv
86.8008 422.649 87.1108 422.774 87.481 422.774 cv
87.7754 422.774 88.0552 422.669 88.3193 422.46 cv
88.584 422.25 88.8447 421.924 89.1016 421.482 cv
96.8027 407.888 li
96.9395 407.662 97.04 407.449 97.1045 407.249 cv
cp
f
96.8994 419.806 mo
96.6675 420.067 96.3882 420.197 96.0615 420.197 cv
95.7349 420.197 95.4536 420.067 95.2178 419.806 cv
94.9824 419.545 94.8647 419.234 94.8647 418.876 cv
94.8647 418.5 94.9805 418.185 95.2124 417.927 cv
95.4443 417.67 95.7271 417.541 96.0615 417.541 cv
96.3882 417.541 96.6675 417.67 96.8994 417.927 cv
97.1313 418.185 97.2471 418.5 97.2471 418.876 cv
97.2471 419.234 97.1313 419.545 96.8994 419.806 cv
cp
96.0615 415.159 mo
95.0659 415.159 94.2207 415.518 93.5249 416.236 cv
92.8296 416.954 92.4819 417.834 92.4819 418.875 cv
92.4819 419.916 92.8276 420.794 93.5195 421.509 cv
94.2109 422.223 95.0586 422.58 96.0615 422.58 cv
97.0493 422.58 97.8911 422.22 98.5869 421.497 cv
99.2822 420.775 99.6299 419.901 99.6299 418.875 cv
99.6299 417.842 99.2822 416.964 98.5869 416.242 cv
97.8911 415.52 97.0493 415.159 96.0615 415.159 cv
cp
f
546.536 453.023 mo
546.536 456.824 543.443 459.917 539.643 459.917 cv
442.769 459.917 li
438.968 459.917 435.876 456.824 435.876 453.023 cv
435.876 356.149 li
435.876 352.349 438.968 349.257 442.769 349.257 cv
539.643 349.257 li
543.443 349.257 546.536 352.349 546.536 356.149 cv
546.536 453.023 li
cp
539.643 340.395 mo
442.769 340.395 li
434.067 340.395 427.014 347.448 427.014 356.149 cv
427.014 453.023 li
427.014 461.726 434.067 468.779 442.769 468.779 cv
539.643 468.779 li
548.344 468.779 555.398 461.726 555.398 453.023 cv
555.398 356.149 li
555.398 347.448 548.344 340.395 539.643 340.395 cv
cp
f
451.491 356.727 mo
450.282 359.749 442.801 379.398 453.212 400.255 cv
464.23 422.329 486.271 427.688 489.203 428.347 cv
487.706 425.582 486.339 422.74 485.072 419.859 cv
484.421 418.372 483.811 416.87 483.202 415.375 cv
481.447 410.901 li
480.304 407.933 479.096 405.058 477.751 402.212 cv
476.403 399.373 474.953 396.576 473.392 393.827 cv
470.279 388.318 466.736 383.025 463.054 377.698 cv
468.02 381.859 472.394 386.735 476.163 392.07 cv
478.048 394.739 479.749 397.544 481.293 400.438 cv
482.06 401.887 482.776 403.364 483.457 404.857 cv
484.129 406.355 484.744 407.869 485.345 409.374 cv
488.745 418.35 li
489.781 421.051 490.868 423.73 491.988 426.406 cv
492.956 419.432 494.36 401.09 485.617 385.232 cv
474.567 365.19 451.491 356.727 451.491 356.727 cv
cp
f
504.46 393.364 mo
496.48 406.575 497.188 422.281 497.776 427.961 cv
498.101 427.229 498.429 426.498 498.744 425.762 cv
501.896 418.342 li
502.448 417.1 503.016 415.85 503.629 414.615 cv
504.25 413.384 504.9 412.168 505.592 410.978 cv
506.982 408.601 508.504 406.304 510.173 404.127 cv
513.513 399.774 517.346 395.827 521.65 392.5 cv
518.383 396.849 515.234 401.173 512.44 405.692 cv
511.04 407.947 509.729 410.247 508.505 412.584 cv
507.282 414.927 506.173 417.3 505.115 419.753 cv
503.494 423.449 li
502.935 424.684 502.373 425.924 501.777 427.149 cv
501.457 427.806 501.129 428.459 500.797 429.109 cv
506.542 426.721 519.974 420.053 527.639 407.363 cv
537.575 390.911 534.041 370.574 534.041 370.574 cv
534.041 370.574 514.396 376.912 504.46 393.364 cv
cp
f
465.105 433.833 mo
464.604 433.833 464.203 433.973 463.899 434.251 cv
463.596 434.529 463.325 435.026 463.088 435.739 cv
459.581 445.767 li
455.805 435.592 li
455.567 434.952 455.307 434.499 455.023 434.232 cv
454.74 433.966 454.377 433.833 453.935 433.833 cv
453.328 433.833 452.823 434.025 452.421 434.411 cv
452.019 434.797 451.818 435.28 451.818 435.862 cv
451.818 436.067 451.839 436.271 451.88 436.472 cv
451.92 436.673 451.979 436.859 452.052 437.031 cv
457.515 450.736 li
457.744 451.286 458.009 451.68 458.308 451.918 cv
458.607 452.155 458.991 452.274 459.458 452.274 cv
459.959 452.274 460.369 452.144 460.688 451.881 cv
461.009 451.618 461.288 451.184 461.525 450.576 cv
466.815 437.13 li
466.905 436.9 466.973 436.664 467.019 436.422 cv
467.063 436.181 467.086 435.944 467.086 435.715 cv
467.086 435.133 466.91 434.674 466.557 434.337 cv
466.204 434.001 465.721 433.833 465.105 433.833 cv
cp
f
477.974 448.608 mo
477.498 448.296 476.769 448.141 475.784 448.141 cv
472.339 448.141 li
472.339 444.782 li
475.206 444.782 li
476.182 444.782 476.91 444.628 477.39 444.32 cv
477.869 444.013 478.109 443.539 478.109 442.899 cv
478.109 442.26 477.869 441.784 477.39 441.473 cv
476.91 441.161 476.182 441.005 475.206 441.005 cv
472.339 441.005 li
472.339 437.807 li
475.661 437.807 li
476.637 437.807 477.365 437.65 477.845 437.339 cv
478.324 437.027 478.564 436.556 478.564 435.924 cv
478.564 435.276 478.322 434.794 477.839 434.479 cv
477.355 434.163 476.629 434.005 475.661 434.005 cv
471.072 434.005 li
470.03 434.005 469.301 434.21 468.882 434.62 cv
468.464 435.03 468.255 435.781 468.255 436.871 cv
468.255 449.347 li
468.255 450.339 468.451 451.016 468.846 451.376 cv
469.239 451.737 469.965 451.918 471.022 451.918 cv
475.784 451.918 li
476.769 451.918 477.498 451.762 477.974 451.45 cv
478.45 451.139 478.688 450.663 478.688 450.023 cv
478.688 449.392 478.45 448.92 477.974 448.608 cv
cp
f
494.178 441.128 mo
491.176 441.128 li
490.2 441.128 489.478 441.286 489.01 441.602 cv
488.543 441.917 488.309 442.399 488.309 443.047 cv
488.309 443.695 488.54 444.173 489.004 444.48 cv
489.468 444.788 490.191 444.942 491.176 444.942 cv
492.615 444.942 li
492.59 446.041 492.249 446.917 491.594 447.568 cv
490.938 448.221 490.068 448.547 488.985 448.547 cv
487.624 448.547 486.537 448.034 485.726 447.009 cv
484.913 445.983 484.508 444.605 484.508 442.875 cv
484.508 441.169 484.911 439.826 485.719 438.846 cv
486.527 437.866 487.624 437.376 489.01 437.376 cv
489.937 437.376 490.926 437.667 491.975 438.249 cv
493.024 438.832 493.701 439.123 494.005 439.123 cv
494.473 439.123 494.879 438.931 495.223 438.545 cv
495.567 438.159 495.739 437.712 495.739 437.203 cv
495.739 436.228 495.098 435.362 493.814 434.607 cv
492.531 433.853 490.975 433.476 489.146 433.476 cv
486.381 433.476 484.182 434.331 482.545 436.041 cv
480.908 437.751 480.09 440.054 480.09 442.949 cv
480.09 445.754 480.89 448.038 482.489 449.802 cv
484.089 451.565 486.147 452.446 488.666 452.446 cv
491.167 452.446 493.187 451.653 494.725 450.066 cv
496.263 448.479 497.031 446.41 497.031 443.859 cv
497.031 442.892 496.811 442.194 496.367 441.768 cv
495.924 441.342 495.194 441.128 494.178 441.128 cv
cp
f
503.257 444.782 mo
505.471 438.139 li
507.538 444.782 li
503.257 444.782 li
cp
513.111 448.989 mo
508.571 436.121 li
508.292 435.351 507.897 434.762 507.385 434.355 cv
506.871 433.949 506.268 433.746 505.569 433.746 cv
504.831 433.746 504.21 433.96 503.706 434.387 cv
503.201 434.813 502.78 435.481 502.444 436.392 cv
497.782 449.051 li
497.717 449.215 497.668 449.396 497.635 449.593 cv
497.602 449.789 497.585 450.003 497.585 450.232 cv
497.585 450.798 497.768 451.268 498.133 451.641 cv
498.498 452.015 498.963 452.2 499.529 452.2 cv
499.972 452.2 500.359 452.043 500.691 451.727 cv
501.023 451.411 501.288 450.954 501.485 450.355 cv
502.101 448.547 li
508.719 448.547 li
509.224 450.208 li
509.429 450.88 509.706 451.381 510.054 451.709 cv
510.402 452.036 510.839 452.2 511.364 452.2 cv
511.955 452.2 512.438 452.022 512.816 451.665 cv
513.193 451.309 513.382 450.848 513.382 450.281 cv
513.382 450.117 513.359 449.929 513.314 449.716 cv
513.269 449.502 513.201 449.26 513.111 448.989 cv
cp
f
528.551 433.771 mo
527.862 433.771 527.35 434.011 527.014 434.491 cv
526.678 434.971 526.509 435.698 526.509 436.675 cv
526.509 445.065 li
518.979 435.112 li
518.61 434.637 518.26 434.298 517.928 434.097 cv
517.596 433.896 517.224 433.796 516.814 433.796 cv
516.175 433.796 515.698 434.021 515.387 434.473 cv
515.076 434.923 514.92 435.608 514.92 436.527 cv
514.92 449.248 li
514.92 450.225 515.088 450.95 515.424 451.426 cv
515.76 451.901 516.273 452.139 516.962 452.139 cv
517.65 452.139 518.164 451.901 518.5 451.426 cv
518.836 450.95 519.004 450.225 519.004 449.248 cv
519.004 441.005 li
526.386 450.761 li
526.779 451.278 527.161 451.655 527.53 451.893 cv
527.899 452.131 528.297 452.25 528.724 452.25 cv
529.363 452.25 529.834 452.043 530.139 451.629 cv
530.442 451.215 530.594 450.572 530.594 449.703 cv
530.594 436.675 li
530.594 435.698 530.425 434.971 530.089 434.491 cv
529.753 434.011 529.24 433.771 528.551 433.771 cv
cp
f
345.543 340.395 mo
271.301 340.395 li
264.633 340.395 259.227 345.801 259.227 352.469 cv
259.227 426.711 li
259.227 433.379 264.633 438.785 271.301 438.785 cv
345.543 438.785 li
352.211 438.785 357.617 433.379 357.617 426.711 cv
357.617 352.469 li
357.617 345.801 352.211 340.395 345.543 340.395 cv
cp
f
272.551 356.901 mo
271.458 359.631 264.701 377.379 274.105 396.217 cv
284.057 416.155 303.966 420.995 306.613 421.591 cv
305.262 419.093 304.026 416.526 302.882 413.924 cv
302.293 412.581 301.742 411.224 301.193 409.874 cv
299.608 405.833 li
298.575 403.152 297.483 400.555 296.269 397.984 cv
295.052 395.421 293.742 392.894 292.332 390.411 cv
289.521 385.436 286.32 380.654 282.994 375.843 cv
287.479 379.602 291.431 384.006 294.835 388.824 cv
296.537 391.235 298.074 393.769 299.468 396.382 cv
300.161 397.691 300.808 399.025 301.423 400.374 cv
302.029 401.727 302.586 403.095 303.128 404.453 cv
306.199 412.561 li
307.135 415.001 308.117 417.421 309.129 419.837 cv
310.003 413.538 311.271 396.971 303.374 382.648 cv
293.394 364.546 272.551 356.901 272.551 356.901 cv
cp
1 1 1 rgb
f
320.394 389.993 mo
313.187 401.926 313.825 416.112 314.356 421.242 cv
314.649 420.58 314.945 419.92 315.231 419.255 cv
318.077 412.554 li
318.577 411.432 319.089 410.302 319.644 409.188 cv
320.203 408.075 320.791 406.978 321.416 405.902 cv
322.672 403.755 324.046 401.68 325.554 399.714 cv
328.57 395.783 332.032 392.218 335.92 389.212 cv
332.97 393.14 330.126 397.046 327.602 401.128 cv
326.337 403.165 325.153 405.242 324.047 407.353 cv
322.943 409.469 321.94 411.612 320.985 413.828 cv
319.521 417.167 li
319.016 418.281 318.508 419.401 317.97 420.509 cv
317.681 421.102 317.386 421.691 317.085 422.278 cv
322.274 420.122 334.406 414.1 341.329 402.637 cv
350.304 387.777 347.111 369.408 347.111 369.408 cv
347.111 369.408 329.368 375.133 320.394 389.993 cv
cp
f
275.822 445.53 mo
275.197 445.53 274.696 445.704 274.316 446.053 cv
273.937 446.4 273.599 447.021 273.302 447.912 cv
268.923 460.436 li
264.206 447.728 li
263.909 446.928 263.583 446.362 263.229 446.029 cv
262.876 445.696 262.423 445.53 261.87 445.53 cv
261.112 445.53 260.482 445.771 259.979 446.252 cv
259.478 446.734 259.227 447.338 259.227 448.065 cv
259.227 448.321 259.253 448.574 259.304 448.826 cv
259.354 449.077 259.427 449.31 259.519 449.525 cv
266.341 466.643 li
266.629 467.329 266.959 467.821 267.333 468.118 cv
267.706 468.416 268.186 468.563 268.769 468.563 cv
269.395 468.563 269.906 468.4 270.306 468.072 cv
270.705 467.744 271.054 467.201 271.351 466.443 cv
277.958 449.648 li
278.07 449.361 278.155 449.066 278.212 448.765 cv
278.269 448.463 278.296 448.168 278.296 447.881 cv
278.296 447.153 278.077 446.58 277.636 446.16 cv
277.194 445.739 276.591 445.53 275.822 445.53 cv
cp
.180392 .490196 .196078 rgb
f
291.896 463.984 mo
291.301 463.595 290.39 463.4 289.16 463.4 cv
284.857 463.4 li
284.857 459.206 li
288.438 459.206 li
289.656 459.206 290.566 459.014 291.166 458.63 cv
291.765 458.245 292.064 457.654 292.064 456.854 cv
292.064 456.056 291.765 455.462 291.166 455.072 cv
290.566 454.683 289.656 454.488 288.438 454.488 cv
284.857 454.488 li
284.857 450.493 li
289.006 450.493 li
290.225 450.493 291.135 450.299 291.734 449.909 cv
292.333 449.52 292.633 448.932 292.633 448.143 cv
292.633 447.333 292.33 446.73 291.727 446.337 cv
291.123 445.942 290.216 445.745 289.006 445.745 cv
283.275 445.745 li
281.974 445.745 281.062 446.001 280.54 446.514 cv
280.017 447.025 279.756 447.963 279.756 449.325 cv
279.756 464.906 li
279.756 466.146 280.002 466.991 280.494 467.442 cv
280.985 467.894 281.892 468.118 283.213 468.118 cv
289.16 468.118 li
290.39 468.118 291.301 467.924 291.896 467.534 cv
292.49 467.145 292.787 466.551 292.787 465.752 cv
292.787 464.963 292.49 464.374 291.896 463.984 cv
cp
f
312.134 454.643 mo
308.384 454.643 li
307.165 454.643 306.264 454.84 305.68 455.233 cv
305.096 455.628 304.804 456.23 304.804 457.039 cv
304.804 457.849 305.093 458.445 305.672 458.829 cv
306.251 459.214 307.154 459.405 308.384 459.405 cv
310.182 459.405 li
310.151 460.778 309.726 461.872 308.906 462.687 cv
308.088 463.501 307.001 463.908 305.648 463.908 cv
303.948 463.908 302.591 463.268 301.577 461.987 cv
300.563 460.706 300.056 458.985 300.056 456.824 cv
300.056 454.693 300.56 453.016 301.569 451.792 cv
302.579 450.567 303.948 449.955 305.68 449.955 cv
306.837 449.955 308.072 450.318 309.383 451.047 cv
310.693 451.774 311.539 452.138 311.918 452.138 cv
312.502 452.138 313.009 451.896 313.439 451.415 cv
313.87 450.934 314.085 450.376 314.085 449.74 cv
314.085 448.521 313.283 447.44 311.68 446.498 cv
310.077 445.556 308.134 445.084 305.849 445.084 cv
302.396 445.084 299.648 446.152 297.604 448.288 cv
295.56 450.424 294.538 453.3 294.538 456.916 cv
294.538 460.42 295.537 463.272 297.536 465.476 cv
299.533 467.678 302.104 468.779 305.249 468.779 cv
308.373 468.779 310.896 467.788 312.817 465.806 cv
314.738 463.823 315.698 461.239 315.698 458.054 cv
315.698 456.845 315.422 455.974 314.868 455.441 cv
314.315 454.908 313.404 454.643 312.134 454.643 cv
cp
f
323.474 459.206 mo
326.239 450.908 li
328.821 459.206 li
323.474 459.206 li
cp
335.782 464.461 mo
330.111 448.388 li
329.763 447.426 329.27 446.69 328.629 446.183 cv
327.988 445.676 327.233 445.422 326.362 445.422 cv
325.44 445.422 324.664 445.689 324.034 446.222 cv
323.404 446.754 322.879 447.589 322.459 448.727 cv
316.636 464.538 li
316.555 464.743 316.493 464.968 316.451 465.214 cv
316.41 465.46 316.39 465.727 316.39 466.013 cv
316.39 466.72 316.617 467.306 317.073 467.772 cv
317.53 468.239 318.11 468.472 318.817 468.472 cv
319.371 468.472 319.854 468.274 320.27 467.88 cv
320.685 467.486 321.015 466.914 321.261 466.167 cv
322.029 463.908 li
330.296 463.908 li
330.926 465.982 li
331.183 466.822 331.528 467.447 331.964 467.857 cv
332.398 468.267 332.943 468.472 333.6 468.472 cv
334.338 468.472 334.941 468.249 335.413 467.803 cv
335.885 467.357 336.12 466.781 336.12 466.074 cv
336.12 465.869 336.093 465.635 336.035 465.367 cv
335.979 465.102 335.895 464.799 335.782 464.461 cv
cp
f
355.066 445.453 mo
354.206 445.453 353.565 445.753 353.146 446.352 cv
352.727 446.951 352.516 447.86 352.516 449.079 cv
352.516 459.56 li
343.111 447.128 li
342.65 446.534 342.213 446.111 341.798 445.86 cv
341.383 445.609 340.919 445.483 340.407 445.483 cv
339.608 445.483 339.014 445.766 338.625 446.329 cv
338.236 446.893 338.041 447.748 338.041 448.896 cv
338.041 464.784 li
338.041 466.003 338.251 466.91 338.671 467.504 cv
339.09 468.098 339.731 468.395 340.592 468.395 cv
341.452 468.395 342.093 468.098 342.513 467.504 cv
342.932 466.91 343.143 466.003 343.143 464.784 cv
343.143 454.488 li
352.362 466.674 li
352.854 467.319 353.33 467.79 353.791 468.088 cv
354.252 468.385 354.748 468.533 355.281 468.533 cv
356.081 468.533 356.669 468.274 357.049 467.757 cv
357.429 467.24 357.617 466.438 357.617 465.353 cv
357.617 449.079 li
357.617 447.86 357.406 446.951 356.987 446.352 cv
356.567 445.753 355.927 445.453 355.066 445.453 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%For: (HP 15) ()
%%Title: (0005.eps)
%%CreationDate: 11/13/2018 2:48 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3QQOpGi)`^9;=e".0\:cG<%0Tr;@Z%5cEE)B5'sR2>nLrgZne%?7+Ulu-J>Q[A1DiH1o[6WFroo*N%\.U0#i_Z"m6^]bpf
%bQS[j5B),NDgm/e3]/u@Zq8rI?IN_5NubiCFui4,@6:$f5k9]X$60saG[^fYbXTML*_8,H;B>VPpZ.*geM&efdknW:--?gmpcpm4
%FeBNZJ=d-QIFr<:-uX:@YRDA<b^6pbn4j;:.'IWb0#.]`kBL8uLot]s(0K:19X>J\3%fki_ghsjZZL8'<io-K0tN\,\ms'2o$:3f
%r/\YQHO=%^hJ=.<0e?pr[Y'?dPZ]_eN@nLX@*f6EG!c9kCp&bZ%d=-iA(,D`+8UuKq>g8^#`o!-1jf0-577KH+OPIpO&J#n5T;+V
%5a(*2^cLtg-:#Wb=X8$\?oHaKUMCKSM]<Ou!tkAOmh`Gfn;oJcn=16tJk'@2M^h%YKs.KV@(kH@+=?50bP]'ifJSYokqHh-45IRB
%'=a'S-$(%.TCs2#F4RY.5W4>3FNTD,]50A*bsD(t_]Y]4_34_-/II5227k!UG,'h?=@6M)c]3=rXRX1rWTDeY\[L0@f]Qe=&Od;,
%JdV9D.N]C9i)*I,rrlA%L%Pd*f47G[n:E_Z@4n#L8&MUe=]FJ30o0qsZ)Ui?%EJd5<nN#RLE4Db&#:3mf'"22G#\)2X1SD;FTWAi
%?*iW:_@$mr6]^)CdDJ)lSSj^VFq`QV_640lJefb5_lg;CK.l:'%+/iHA-h,PaG(1*$O?[sIn0.!p2JgN_8@;6m^;dm(&P37/]GnV
%d0sQfQ5Q>+"6=/EYXDlRe,=/GFniOL2N<8^L`0;UoYI3r]%J[c?4P/Os-J;_bu3/:5TIsu>k&-7i$`8i!X6Um!QOWBho<um^_Oo/
%+8V/(mXP3-#P/"T*t1E.l..f"@CJB%drp104Dkuf_s%iZjjH)4@K9I76XiEhHg,<>OR4rfKo@e2PRe^X*r28IkgmP=R&tD,5<Aa(
%=?0hX@D7EZ8$ckfXA6)dSelDUiae;mB)Y;uC\f5odV(J=WaiDO<[j,LHC\64@,$\?kTc\n=71K+*aqj:AEfOX/(^NfGs*Znn8^iL
%T<uo]cdqPBC*n0b8[IJNKJK=b(k0u,LOmKb(73/-Z3:I&%E3h+:&_a*(-?:H5>Y<)F2_l[ck+:mXKFS1-+hjM(c@DY)/YS9X4oBo
%(fGe_^ZP2nOiW;!NT]NCr:pi4O=l8<X8U@q2>D??Qp$%'KR?Nt,n)@6kJmggecSQp2]F>n(]hc=<jC76_2tca_mn_D0AD_+<ho#K
%/^crkXR:XjmQ\WSh&hG24C#1K^[aeZTtkCaAnY2"H[IUf4k?GrO<Hp@)i\&kPI?0&%CKO<,V7u&&+N-$Aj#Q)UM#j?@"jS($Q3j]
%@jKo?UDJ^#`uB^S5#D%EGpko\mK8<7BiSqS+.0PI`uCT<<k2H+JIQD(ibufrAeVd>Vt_tu*4#_b]FSJ]%6mS?U7D-93^ofRAfUEQ
%B=:E]<:<9QcU&+e"Z_(5A:BI]mI_W7rP:]%+lQon>.nONe2=t.If-CYnRph1ZL_?06FMqPl]?9l-LufD:hu]Cjt.#:pFuA%-8GrN
%$)2(kn+0tHD4]:(90@u],Ad$UZBhtH:<D:baflkGHm/--pq4.&%ha'?F::^)I%W6.qT8S#Ej-%qb'^/2+'Jii9g2n!C<EU\eu,M&
%=J^&d1mOQ-Emn"UT;",9jX)aJo23;lcqLV%(m(XPNbkcf<H:)A/o$iu9lmjZ/iV&:VRbJ=QQ+4j'';-ZOfoX6qtl`4[Yb>t+PZFA
%`44tldauWcI%g/haENN$hHMmW'([+c!Hb5D:79ujEdH;<R-AJe\Ub3hA,Y8gjtic_*M_6N=@Oh2[LA1?h!@D^b's7eq%Fd5?)_qi
%mQ2te6o3cIWf;H%mmk+iKF[)cT<@K?,%_LfjUI/Ln2+L/]ERl>p3,:JjCWitr"PZ']?_*E4;4:O]u?A<mXH,n5#1$XH;;F-RJE$)
%:XXudIp2?dq*5@AZI^e#o\XMtA[_M-h<Q\cL7j%oP'3nT21>kH6'hmP3$9B!s*[S9T0A)%o+U_AfbYFa?Cg$Q0uJKhi\P)'A(ta@
%Zi5gn.t;FSH)@TE(,notd.?qiJmV3Fa*t502i#C:e=#`FN2$RG&]`Bi+7-d4T-[VLX%V;-rBb,_(Y!p#9pd"7o7KI0'63LR4k8H,
%EsN#"]Q&1s(,^bto\&[2lYQM=Nn(6hc)r.!rmT/4&sM6\.Cr<tDU+s?<)'1L6q09;,DE>CO$C45kp`7h)]QP8Q76P&NJ(f15CMn*
%N;l0jH%,<7KtbjV9[>HlX6B'%F%lOOq$X%oId3-WDY*k[JYc/YVJP4NKmt]eq],2>ol5,)A!F*eT?+icpt8NJmBgYRZ_.h11ko_c
%=*jVbcRU=%DT8QnCMLMZ`lkR&ql&[RNqN5UYL*&jX)H5,=(HUaFtAm4O1h)$jn=8Lpa`fq$T7A+c2$nidgHN&jamOUVimqo'JS=>
%(DQd*(;4k9aNGO;Vr0f6pj:Bn.UUAYNrLgZ5<P?'"96NhT8tS$ABeeqbXUH*O<;R5ZfC\Xb@fdXl=1q*fC=4DjcdAPb3H>Q7`iT@
%IlT@>'BsOp517`51":j5@LBdEa:E^s(hrQg:]062r%s?,'eXn+jdX9GX>^S*cGs(Q?VQ)8e&KcW$%!2f0t2'b;RqXhDgpQRSA]2-
%r%Mj_9pd"ar0n3sNgmKQ&C?;E2uT8n,L&E1Q]=W=]8s3Ob%1s1CX!)RK;P8p<Q4,m_huuXpcCmspcN)G`cpI`>OgCNEUOg+:[:b[
%IMPO>XC0ZR'0+X:LP$-;j&I1FnftI<O*,-GrMS`p53/k[<de+tf'_!tc3Gh15PJ4+<hG(8_ePToO1.eT7\bW$H0YR)6.=.HWb&[;
%\=ca!fBg1lp16dG4H2Q_ZS5Q`e(9aarmV:h^r:,dYB1Dr%l31;"FPbU7RW`;6l?6kr^nP8r#dfhb3dA=NOs@`l!HUOJk&]9>U26k
%Mo'G&SjiHl/FjAU9ZUA$dT8JfildIEs&g%#4IO1ke$CJ&GPn=N;'s<EPeQcm'`L=9(<$dha5<soc_A(C"&7+9r#Z&WH5:)ic_C2C
%deK<9:H47f$+i$XGc&KI5Y_S<-i<Hs?cUZnS=$td.OKo_IrlEt\UlJWIpm`n+[p8nH2,WqY"A7m?gYkm06tm&T+^tO^1Cnkf7(]A
%.9!i:[;-F`f6k[(e?2O5g>53N!Q[*&qg)l!7)j[1X#>sgVH3(#XP,L5Rp*3+Y\MWhD/.UK=Z,Z.d)0ccEA36hbm+RSY?S7F[/i6e
%UL.(IFfInp82+&=W>Z5fN6DH9*s_Qhd\jh)n9N`:<[@C2q>IF*lYj+Lgb=1>r8s>A-dhpAbtChPZY@1be4I:EKFdS<!Z0d+pr`j!
%hf\]&s':BbJM2,*p^:ErnrX<Ir**%"<nXQVXg`fGG)1-Te**ZV>qFuLqcTkGTaP4P5IaD&NA$h\hYH^s.ao>D-Lf$AE=7b`^4*qF
%@a=EA$^pE"ZYAc%n,KX7Q(4fD_mnBMP20s/*JeTR4Wcn\4u'M(QZpHhrnVUe<aa^lptf96DqNtE9LFn`ok5POJ<)`grN5)t??T_O
%c]Ti_-2U:naShjj*.('88(RS\;?'$(HkaWeDrE^0"$bX%]X7u+KS)*&3r]ARUZ#>2>1;j7$!I8V:3$t+,(@p(9hGUHIFE+G])OkJ
%ruKGahqrfGkp2_Rl2L/(n,F#AK0-jM\*h`;9_Wp!&#JN^mrZm"]&u0RQ&k1$mfZ[;VgH/,4l<NH>u*r/A)d61b>tIfoCGl^'4V5o
%@l3lto0p*5I2"XYc]WGZnsPdc.=9V*Z`s=82B);`O&9^qeQNb-6qV^EWt,VGG5/G'gkT,$3>J<"k5G9__GKhY(/&Dbr1Z'ug8A9r
%2g6sXOH"[BN#J5ZWahL"F`7rT]%&97<I=\6AN.j$\mq&XD9$>'\HalASW-)&ba1\af$C5dZ[]q3:4FR6>!MmsC]EkScZm^TmZd7j
%CA,5Wr=7To:Y_8.-"i)GFNar:o3"9K[/K&@:!+Y_@MW8;Vk-USdBkdSI/cTlIA^qJ^iVPClRdZ@;J^pJrsRF&pb,j1n:MS,]Caut
%#RGfXa^02e1^&7%(3d1$:^2='AQj>H(1-uB-AuFN>'OIU(fGjO(1*klQYGDi>'QGN?D`FCC#NW,GkktnkmJJ5Qkke[.eBPRP%P*I
%[":,X'r8&,EqV/+C$Z4;e&s)Xd1Z5"nU0+FRqPp[A&EW!>W%A8bl8R'nMas,6u:ZIR.,/m`q5:JJ'5f\SKD"&?8=7\cLEF?`8iu"
%YB10$0*]F+mieU<0MO^k^E3k[S`<dkNg%!1rX40h;Vjj4hS-Aff2oS4ks'5b;8-Y,mI/LGWVLRQjnlQ2C*MQXT>&T7N[_;q+,VVa
%AOD6u;Z-K=P%@]E*OCYTE6PU`!LjpIn3r@?qiNZV^PGN$IBq/]Lq*C"F+Ab7BTloIIk;NT2pV?;3r@tlAX];e1UQ\qd!kRDZCc_C
%KU:jd7`/#lpk`FR5:$.0+[8.$$!u\?+AjrnS\+2Hr%rL@5NmL(b.c/tZ?F\X`],4rb-[0`3J#c"f.jXH*Flb,_&'(\plVms*Fm;V
%mBhm.Y%E&ba-bF4VKIhPX(-5\?UoFVqEAuB7jVeW_D+9rN."j/oU?@9IEj"UW/muqMFPY139G;.CmFpOQS7'B(2al-.!:NhO_so>
%2hq&'&@_Z.@s]k)X4PPrhVW]d=Q42q=\,seI+RYLhQ!giQ#*[1_.rb^D5d,\RXJQ>=`Nf*+.#`kI280I=!ma$\j#Z,Ub?t>&/Y$0
%4#:0sO5[Q4%gtT3G^9PAgHt]"=!15@%=/DSl*Wh;Ec'0q.f:!,:9iCNb;IC1_67oULp,T\gsaj=ocS`\A#G%/8M$)9bj<5ODjaC!
%Fj87SS2!8!jTgKZ5OcX?XTMqEd.qT"q!*IEpd/0l>a5,sQ0dp/+nVS\Z$dU&R?k)qDZ?Mk4jE*f'=jVt)a;O/VV0`]S"&&Hc::tm
%c0!"JKkWG(IcsJ3\V\PmI(ZaLTul(+4I5&\=jqJ1Ra+XV\S4)`:$8D<gj^uJ]<L[CeM6u8`n9Hp&cN/KF8h7<pO#a8>5=[AFT*6T
%g_[S__+0)2Ok2>_I'7qQ:&5ZSnTEj[Q'gEh3TbM0Id\&)8[8>'jFW?T7A&UJ[OM_WGNeL<Y8&!GWP0FH+M2KTXR;-,?fg*=pIE+s
%l'&OP/<TQ"ZfDd0dX:'G]AL*t;ehO__4*tIq@>R2?bHSTlmoRdEpI?.pT)YCRt>X@$Dn!kEO9YuJ$jB-N10e(@3'R:s!$]XNuM7>
%c]WI0r+*I4gu)b)cbf*sc.B#E%JJQJOn[)1(VuFY4psRs#N%R*Vdbn7I*(lE.L\0VA#Z8ibV*-eXaU&AEUsCIk_%^2:TN1?<W2Bq
%r%'0.-2Iu#>U_k>*&8K&c"H"le+T!CVj'UYGh1dGfZKgk#k9<GAp5UXRerpgfq"LdmYf"Ldn!n6,6]0tf2]KUhefu:qMJZfG8]F;
%aBe-c7-Lhd9S9)0$&YT7d533HGTh@0_pb8lm"1t8G3o'l\2<oahR(ouNg@J9_l1=mD3(#(f]_q>GPBaohMf5sd?OI1fT3cbo-7^n
%OJmXQ%R0H7qHIfkE8\d+%rWJ<)8\]9C`!+A%YT;Vc,PdoXYig[^EbOVNoR)2;s-..EUh[C83^QAmLI[+F.#)1EDlP1Du;*!E=seC
%diTMKf:_<Q=HLY``ueU+6qYCQ[rG)N&Ga@qYkh;&q9#&JI_gAfVE^D*]pS">=L81D47A[rR7'Ef#<;G'W)%i_`u(#$IK\)9pfSI6
%ME`//cdaj[3$7n\r2O'&grup04,<8J2Vr'*Mn[s?<A47EA"i7%lHmK,OV.BrQXo0ko"2VcY57cN!p:d3S6du@a4YuS?'MG-f=LeQ
%T3-[OfR*LLN+hPe_"<<9\D%*-n(g]s6/__>!rPI+e%]M2VZHJ*aHk#,l!u@./(Lj&O9_5m:#W6PoL"@i..IZG+#SM!n@@Gfj&#&;
%[O.DKX)pCbB&kHK=]>iLJZg\<4&[m2Cbatb^+i9.lJW;;inu?5"ik;!.Xlh<@16]gZ(T)"0,C>]nnSJ??ha?'@!Z#QR$Kr8!E[@)
%[s4\<B.UkEAiRP?+Xa+r0PO$.s3M+%nOJ]'j*No_OD^?\5DDR614gR-m+*nM6E[SM0R1I9=tT3,^]&H,-I4OFm'tGq^H(lV7BiG0
%fe/_EK[]8:!f'7gW1$I(kEKD7+$C%ZVb*Z2Yc?4AZ).]ZDQL_4?E#jBnS0H`AIAPbL6qK::jZ]#Lr!:G%'_TUJe[-'Nr4h8#kXe:
%mpEe(T>d@=*\RZbJ3"aYm-cOs%<Z^U#/n=XX*+`2Es,B-<&SYPgC:LHL^W;5O*eMGs1'rtEXI;jWhcZs+;ImUS_#1YJHHa:coGEq
%<S$[qNa:Gh;3sN:gHL"2!n_]>7Gok=F2nI,J&0$$e-;;:%#Z86_GOdUU8oLn4D9.:T4=X)G.T(ijLFt8.pokJKb6@OLX_'0;M`?S
%:Sck:K>7D0>T-&1V$h=q'RT2=@KtL62G3Y),;3'<s4DAWBEKZuSOX>Q*CMD-W/@GpjeKI6W]2*(E?]ZR_1]CO&7+6o/[2VBQt@kA
%EL^[o!ULn:E4X-pG2V8rVE;S5@_f64?[b_6ZU"4-nU2u)[)kP^*3bF`@K&d'BK'n/s3GI:?U3M;JLrooQ[2@sYYmq,#VuFal2jeo
%nEWmR!!#f>0]MWWc5%>mh<hs7b\rs3/[%/6n8;2]s0/lWl9'GMSBgtd+Up9J#9T6;qQ&ihJ":g^[33fi6`#NCWgb):3(6m-2I.1.
%"H-:gIl6cV'=Z=(A0u5<NsIX-&G7s]SO2jr-d'&Pj8=No;HR$7o;*=R3;r)nnEWPPm@/U3J8N=oi"=:5YLBnK@po<8W/.U!%#dg+
%LOpTDQdgLPDt5!B(]1\no<hQ.;u&T]ni[#>][O)W?cS*-4VEiS^OpIPmXjiLR[%d9Z)Sn4XN4jWG8^j!c376E:#eBQ5<Q5GB-.e7
%,-q,$8fo)]-4BT'-7I!k`u+XLD.0^Uc`[_+5&Q5ggjK(I0Nl<OVhW750[fMNq/,fp#U$pdNQ!rIB%JFuAG$lWU]6r&1L"JQ&RU.P
%Bhc4s*1CH>f*n1<*P9^/-+j.AnNEHSo]n.A..u;F9EW5]Cme&VfJ,I"2rMgKpjim4n*,BjZVq7%)P+%q=?fC1cSH*t,'$%VEkQA&
%fDVW]a2g/RI9E=Fm28n[E,<"1m?bO!HDlCBYMFr@G64Si(s%+]S[N&$M'DU_f3N3T)CI\C@<I&&ZK=*P0k+B?;!F1`mWBILb7&L(
%Na3a*n#MOY=J,1sA(ToG4ts\7m%lc(nS$bI\'<VQUObNEC@,k8^aL"sG+$WK;(h,s-rQ,pAU9>j9?D8(l+f(5l%%W=1_gOi7]U;.
%J1=$$7)MmokaI!F?g&Z?'HZg^]1ZMN[**mlU%K_l(`(UZJTfqp*QKWo?o4&G]/u,7I`k-s1s61<ZCH9kjINPNdAmZb`d@K!38L<G
%39@s6#7=iq5n^O`)[1nFdkC8?Z7O.:2rt-AX;?qj*Zo?$2,J5EV)hEag=gt3I\X"KRUUe@"33uQkB1Q'co0UnP)e)Z2%5ODI>F/4
%WIh$V(QZG?%0pgDJ4<QW`r9]K,sZIcV%;;jkka7I4i?hXU`rj_q.9g<+H(emg$0JE$PhE5Xb`Fu+5'YNUs]$NFRfOH?Knb22.-Hg
%e-8mJo5ZQ+&:"IY?##\[<n+O8MCYoJUKi7.@+4>h#FZ^k$cIBt]5KQ6`Q1Ft$?k1)'#P6:((=o9qfo#I(QHG6g$U^Y6Pe>')thV5
%q(8r*G%km,-J'Q%3oKm3%u6elq$%06Ck[Q[jDFa;B.5^>2TPn75lLtMWPY[m[(nr?re:M;>/ajUE6+0NGR'aCkJ/'><5?"S4(Y`\
%@][B1Okh%,53*,t+TPd$EK%2WC21,ubWEQ)%r&3u>0aWFHP*6*eSBC^5*.tRs8$95Ruc6Og&6f@,^IW4T[0lQ=0.,on1%JUE_.1q
%-hm<k3<`qFPKh\S?ndu9l,W[XLZ$_6QC(k#mHX!TA)>m4j=?"l=`OBg(j%C?i.A=_)I(D(]"4.e]`"hkY'RM"_G7Q<oB4G-0_C_>
%#+$-=K#+;^)&QD<Zg$8k_>do3TFc0>p3??dkMXrY>eR0ri5>I!r0brU&i"H_Y%XM`%HQ1;h/`ic/2!*hl,V6/5(6cb?PB0B^5ZK@
%ZuP'9["_p\jD/!^&_le`Ba+h"Lhk%,(&/Ks`30?3AnNh:?\'lRfP9PjB>/g?_P`YDm%-sUS\ck*,tjM%dF1Vk5"'Yd1m9beBDd(1
%?R+gUXlh#.@)*ji:'e8%6bZH7FBG"V2[9dIai`H%:ZYbof@%V>2j;ocp#8h']=faB<[5ZT_K0?RP>3Y:5jtP]FE)3c-<44(SPL9u
%`-Xg.6;J2J-QEE4B7i&b[3m"&WO\KUmdZf3rV:N.4m0`tA`'L;KuhfPO:F_mX0q(jf]<E]a8Z]?,7DgIN.oIJCC9\rSTB<BZSP/<
%n,i]#GC],aWf%,V!3]UEj-_c8;=4IVm%"V%X:h3uSE..:nb+BRmj,'=:ZJA7m=drSF]K\:>)H@Qn&)-,qIY&i^0KMdga\AAqHA.j
%p3^Et4;'Lg2M^jX,C;sX?Dp*/Rs)3+fuWOA']l!0T!UD"f>?di/0B5q/udfO2KP[MF1p#JT<%Y`K4&r)l_ob7Xo5YPIO3Q;>1GCr
%ii:8XX_>lDCocgd8gY-S4*mp1*`U">g:ZCj?EE=/IBTuH9,G.(?Mr_r[K?AS$7@%oa\?NR]XJ0a,oX%CQtXS479*X\<5c:Fg>g(n
%r=0QRk%#RrcJ%f903AT0dR%Lmc9%/-/@elACQ[gSWY2iW;i/E0Xd=uX*;rH^q.FY)`(,EcX/0EIVS)d?%&PX&&7-_%$uYNXEMYIM
%@A2epR:,7Bni=4mVCrTkVqctQ9RE,onCqbkak!tob!i*<NcdZg%3J#8aFal:R>&8\i9X)$-o`T-MnsZR[!6"8-_hG.Y&QP>V<u8s
%0U0l;_<$=BBJ=fhP6e=]hk(,u\*9euZks)Q=0'naOD>o0"Sn'm#0#9`>YsdX.7&5f@m?onbh`S)rkSnUYsU7EB;FAAg0*o/\6^B"
%<.^SI(M[o)CHiWj52WFG@kBka9WThDK#sM8LL>GER1!VeT4>^nq=\ZE0@ud)*^k>E@+L]p#Tdi<6c%ddAM8:+N*F-rhOtWGj"AZ0
%kImd]i2+,M%UMA9eo7)4b;2##J'th94r34E@.F.O+"Ud-kCSui<]4'dNGbu7_!M>qCKJhJ3u?]Z5*mmnKA@8NG:'h4oO_^iM8Pa8
%`9b@b;XO$k-CilRAg3fA`u4<l=J$3$_^8&5,<r<tcY,h,9/GmLXkT8G7:TgSk$1'q,\s=RREYV\1p_D8f9j\:mcJ,%j[3bEZuON_
%3U<7QB!+*1kVh:bR<cjY+(gC)R(BT;-d5\*0L0]fI5fV=f(O'Omc'Wi4-OmNAf%91g2+h[?Hbn0b3gf6?>6b:Jf(*0+?Z+KG[.Gr
%`_N//B2_=t\_5e$Q^Q*)e2M$$Dbm1^_UE+-p1cLm3.%R4B4d-5_jNB_q<%%-E:="ZbdL91[Frhl]K/!8gTJaPXsC&hiVT2"*4LCd
%1a`OSRWJ>m_t2[75s%&m9_"$^]4*lXG8S&Uk>#)>Rr]Cn[@Ok_eaqf]@r:pOY&\b`S#\bsH?8KA:38\0hV3]tjqfY2ZLd&3ipAjX
%A@1KaDEL%rEO;r-TAV3pq4652D>s$41Gk_*UTsWqRI927IA?d(?[f;Fq59"gj8!kpe6E9F%;B7U?9VMJ/i;;jOufq`Y]e7J/B"Xb
%&koX9URWDW*+%3#$\a;"c%YJIS`57;=jfXeP]%=@WJft,0+tiu>j,E\(*hu,je?jG(L:91=he69*8&^!?7oSk4MKY*?G*M.g5G^=
%g>QL0\I'uJZ[34@h0NlVXl89jAoK2&d4^h#?!1CcI+#T!l-0"cdNR8aV*Z]IY]P5-Pa9JhmHd^q_'r%5`5,,\0k$A7X3'jN8BkbU
%6JM7*BP?QheHm6dlfHLTIe"]TBEo&7elDgL#sC4(H$MUH*+"XXgrqB$GH'cem9Q^*]IV9qb9m\+Z$^,PpWLO1EP#JbmV\?&p;9Ta
%'WU#D"jMK%YOBaN_l6//&jBJj28U/bQVQ2#l-+pT%^fu[4*.F=1b230Z\]D?ZZid^&[?7Td[c?)Ot1Ze=0CtO`KelHQsOJBlPG\O
%<hURkb\r1[l<5GSM'"lf6k1+M4)ut2MNPs6Mo/(KH<Q7!Wn1K4S@CS<.LX3b1feDP1spsIV2OP_G%3.>*1ZCc)uHbWlHHuPYo5Vc
%/ZrjM=a;mXgV$t=X`_V5la-Qe<=hZGp%eBsa=T!_2`U>D[a&a57Y][d*m\lie^Ob(4:u/-"V^M!HV7M/L?FUaX8HQn<9*]]mZ9Z>
%<Ilgo8XjYc*hNi3cW49^2Aa9JQCVn!#KciniGpri,F$Hc.Qh?V(WB3#h\$YQoI)'Ja#!6f:$dd^qHQ^Ab#UB6js%j^1t$+t)4!0>
%e-0Rd.Qeq]0$eYdo4kEQFi:hN*3Lr=Ac4rdO`uu1H2286(QqFR.ORHa/??qaEai8#pr?YdP??'[L"#sP;J[mAP\9r06!_3i'NG[/
%1[*e@mLLr#o.?Z=Q5t<Tm?H#O*9Jl\NSWF!G*#Bgg@a%nO_,WPT(L]@9[Et7i)ic+S@A0TFDXBp2!7-q[>gHZAaAVlD(ROW"S9%7
%ZZ]p2g1s_t1Bl7/cQ+k/FXakb=\kk046qUM?$<o/Z+mg*27SPRDJ</.LaA[pNT42VDo9q>6Q=@:lc78kp/Q-SCUkG=4>LZJc%ko$
%K?a,(/8hTV*&q/lWT)abdD>D1f#./(MSN9IC+jBn,0B]Terb$_SSMl![uJU(C>3GAH>GIJZPnb&iaOIR1`q[AS+UqeG^ieUMoL_k
%:RA8bnVc[$-2t8be.RZYor!IldVC0>g74A::[H:Pg.j(*dj1\Yb@34ZA@I`tDKe<J.IN_(jt;#BPaX]!V"SlWB^5#[(/M=[&+f&9
%Ke4gGd$@&`ZeJkMD(R]M15crES]pqF:!XfIos7=HfBqo-f0YrgE^[OsfaAhZ1copQV8JkeE6-_ooRl4BlI`*)?ImP/]?TG,F`4*q
%YdG8XKqA"`DG&$a-[j%g&+tUNr@N(K]Upk,me1GZk17@Hm\Y'0H$t0k!""Mm`ma3bQSdkT]D3T-Ogo4V0ts0[S_lOMLA9^&iKfa"
%*Z!$PiUA;$*]se1e_3l*8`(LnaKnB,c&LIW/p`mfc_^%i+a5`k>KK%+l\ieMc'UZNgV3%q5BQA+-c*DemmP@O1FG22Bca-3WJ$P`
%l-eiOGIf@iWMeq5lLnr`k\NJuC+c%<G?.Ltq>4Eq>mSa2L'q0nH_YPm[Zi:A]9VC/Ep7uF/9,a8G'9F;SX_]op%l4H^WE)if!Z(7
%.gtU>MbkTN_))tuC?=gA>+;.pE%5)V94dkckqX&]>/./i%ng!_a#WfBFa$m!]"8Q]l_%ZdY1IFAmH_X3RXO!cLU&jdV6bPj+BIrL
%b4ilWgX'O]Gak54Y&A6:mB+"Y?$$+E\Q_:%/)HhfjKj&RTqU=9L,++J$XQp&/TpmU+aS<tIb7laeVDRa/c6HKp3MeA(12R(^Zh&C
%\\7")YoPp@0Wnp+H)%imHr=364[(KiQd:_Nc>rH^U`FU(@@C*._r$^FK0?!2XAkh7-RI%e2pZD/VR4[kk4.SV_JCLL:FkGmF/b>7
%\Em5\Q'bYg"`^`7b:btWlQ&&h'2Mft[H#g"H*'qf*)!jPX]m/cCH#;[.#WZ@PB'p^Hck6#RnrG:hI^&#BU%iGWOQ.#4LL0g7f#Mg
%>kN?J3HNm/C;r1&c/u^$fl&Gpl&2\9,(J>sX`Bp)MAkm9qn(jA>q9f0Zir'@gHNnI4LXWrE$(s&efM<]kDMK5`X.N"dtpN^cCK`%
%Ff,nAYNZ")X'^PuQ.`%U7Y/=+!DAPV#Q$]c39Y?3o8rE-3c6q=QfXPMD0]sP0?Jn(*EU+dY[5cU7:nc!#mJ@_[m+V!(-j@[$,c#?
%^Au^UAb#`4[M1Hs<VNbQN7$lrR)O-ir9fla$T58#"q8N\FDGK]9Fo#F3bB0=TlpLpCM#*D0tq'bgh6lb)NA'ZmQ5R54%97f:SWOQ
%l(N9fVdF_/#0o8?@//KMrItOU@J9ij#'@7W!OHV$'=&$-B[s=j!NSZdOf@$0.fl$I5<oVG%s2Y.W+6+6/p%C:JVHJfrP0=+n>Kc\
%ke9Un&(\XMpKEXe>1M230KM"Z&*0YoX0sO2"^.B]Y>rWlmnqCh_'l:5O\:_bmZ&\)^<+5jcUR>Lr5P(BE1\KFFFA-+e>s]0:;,\7
%)0D@`GOpFBp9BKbUMB5).^kD8"ikA(=1iY8@=5l^Y/)O_Qg@2Z,j*%Os!E1[9G!-@>5(,Gn[aVm#QR"ZG$q^_c,UVThX6]u'g\TM
%G,otI6Ki;'aN=`diO-MtU!iV'L'SKQ*$'ee6TZ9+gB(Os/pR(=r"&jda[Xl5e9]AKbHMm;T0>T\'jKUULMUl[n>#BX[fm44?of]$
%KqUk!DpjW4jeU`/7^r,PD(lYg"us:Jrq&gfN+4e4'>N9sh;_bs[gqbiNuoD\rQq'bBf'/;om9edH446Sr]G:p)2Nj@G[S+WK)?Z5
%>`HGd*^u4PpXjS$\*SYam5;^B`/F>u%kns4dEsEl^L=;CmC@_Nli2tP_/m3RmpXLglG,f*PWnU*P&8kJ]\`)oh::[@cnC6q?5^Df
%<O#6\+/t-I?T1Y-G1sa>T7ZF!=Kc7/qER/92-@$W#++2S5]eq<??5D,dENRo9W.KCLbs(Qmj%Zq,@4gDLTu*4U=Ei6\PF0^>48jk
%i1F?p)BZ7EqDcP8o)HP:M>(:)U!O0SqJ3_\MMaS)&De+'cd(NC$g$i5c[.GYK_B9KkZ<LfBjt0'4`OYo`pu]r9oflgk,U*$GPM'l
%p9sa6S2H0.IW9X/)hpa"Z<Cp6/UjuIE;J7dQ*t`A2rTaSc,FhcEb/T_a@-^rB;\m:X1!WWRGc69@a[$+SN5eJ2m(<,`QiY8%]/R#
%m-We@bitDB9NjF*k'9Oejg\(N.90[4k$mZNdH0$#9"Pc&*!iT!9l)s3FPKpoh*cD[,TGL"b^@jmga].pdDbCO\[(<IQr$Lgk1A,K
%SSm`W/g4Lj<oQh8gPPC\]=%-o1>C!JUq)E%;e,>!VFadtrSkoGk#B$gStFfn`XBoPq:i6%gTB;N2X6^BfNKZV%&[.gH^U_$EWr<`
%oZB8tCJpG0$PiEl0%VS0=uTS_YPB?!4>*F%I.fS/Z+YBJ#D,BgP5!LR)a5i9j5+&q&^d34iq^Z3M_=#;./.*frFm]c8seV&V.<;H
%=Pnq\M[SL^dE3\Og7;f<AoDt\I"/T5?7Hh8r+(N1Q#)FTc#]q?l<&+gCY&H53RO5O?Apl&gKm"3?[,$C6F$4^)K,6ulfWJsGcS4(
%$u[2iYH#k%9l"DEEK0Dt=\A(*c@L$$U8_IT>^=RdXr>)drbup-Z=5.!l>`$IE0ZuT-20<00@DA^N;J(']c1O+924.7iJmI"c'hJ!
%]d)QT[H7Ld/S02CflEim-mpSleQ/Cc;Bee"cc]IO^RIA[XVr,dR:,gD_.aU2E)/qH9jemB33sup0B'%W#5bcIOZoH*P:Plf3gt"6
%m"#:HEoF.&oSSaaY&:Or/iGZ>b>1Y&KU_oT_g&_FlqRYb')VVRg^TRb05[:i.oRWG3LE?#&9?epYG>DR:Si:Zob:/$<Y(eNL9W_)
%:l8m5qXOLF=Zi$E*2b93lT+Zd[oUI"?0SBY5RDb=PcrOHI/#fI?,grReC2B(dX"elf.5,AC*m(dk(/7kO/dM0[KdI\q<-m+4I9>;
%aJ;/a"%jT#el2fL"M4!a8U1-fGbum+.@LiQ06CjdL&GoX20(@+l_0!TN(YP^%[@8.asD$P218c%Y6p=0gF4ar)\\&JCclTG;BR4-
%/)c/`hnS7(0QFeMFdYP7B=laZ&NV'n?;g0'GN'/14HZ+mE-qO<ZW&r@`jq)G[1Je=hk2J;VMNY^e]l=d69CF5.Aui\3#g*Nj;%=F
%asP+TT.Zn3`^%/)$\7#K-s<[K46h.VlnkkO$PtJlE4jpb*u]N=-QQ>=lD*"+f?Jpn9G9'!QG[*H[e*NCHW;/q?II?PDWaWoJF]K>
%:=t[=?]._S3"n>jXCkH%[1M3KH,THg#H.Z0V+N)*P1>3uadj+"'BOGa=3.JBe]7B(ii-."-5s"-4'njkcG:>&iViiEoSS&BA/6BS
%:&M@r>D-m<$OJ,LXYJ9B_IFr#XOjUPPF+PKgiY20b]%N&&2UTVjsAaYa&Gp9?,Y(O9:b$b$h;]_9ga8B6oKjD)u'T,B$e?Mk;EtG
%V7)ZBf\r/ZVZ-F6g$k..I#H$eo3APe?J9e@(jMVg:JmdO\nVrqB]`YZclU*jH^tMrn'\;-i-UHQGlD\Iae%efa4SCL1($_scbUZ5
%(D?Xgmie:k'r8ZEdMQg>5ajF*['i5&k#Kp]X,ZLOZDFQ+`[nUV]np_69?f<k.4;V-^)X&Cp9-AspiO%M0I,_6n^Rd,J^\k5)Q`,<
%;Dm_4I"G-;rKqb;h;&t45]jAV#23pd_Pa:GD8I4#feiX2@Opn4A=@,qjVXTNpNu8Yb:0k>\gCZ&)$LdAVP0B?+`UYY7%V9JBETtD
%%<d4mV>d2rcC3Qse:I-<2E0B^mebhq#.-GGL-IV:0/^lL9D:0-O;fPg,#FG/0-7[!grBZ<`G((;24D:pb)@.,(ec.WG?fI1;H`md
%/XKF('VXmu?`DB`n\M230B+R"r31n55X2eHZDU&s;)S\uh@P`lAE,_<p#7ijQe1jR&'-T&kXElF`,I0b_&=8RUam#g&(Z\o"/<Is
%*'1>2qdU$fa.oaNiL?sC=`HPblfAo4RfU]e=\Hkl6dkZnN);(B1_[Kp*dC,=bk8o!K+39pg`Hk4U&$'(c6I%OmLM?UIB4dqOY@EV
%0SCn&Led!s+XQ<#+t+TY'N[C[jGaJ4j+[)W<[P7g(*F-d#[[P)a'7IbX4b_WiRM*Y\/[rH`gOe'c&D]IEtHZnlEQ9#ZYIq"Iu'po
%p#cMDgH73Fgc^*Jh=8K/i<th:@(%t`nW9TEWfbXdN<t[?6FR&p2jBACZa',@,s>DsSR/3(%\=>?PS+L=r3Va3`U`aunLnohZ,mMP
%'.0]tg(Dq]fSDY%m$CLLB0nP=W1LKIV3So46<OmET%&p!'WW[(3P@K[\OZ_.hpVh;@F<c1QLeX2hT,ch=%n/;7`MUXYjKs@QP+Cu
%fW0e*[rGXi##GlSbLcc\jMaXO63=+cA+JV(F)f+6^7[q,3LX%\A]XW=5mF)AU<YCO_qBF.Kh[p2#nl2,82V7Lb9\2Thf^fYh:pFF
%6<SsZ6H-l7lt/7t14Rn%Tea*l_lG"Qj\8a2oPZ/`dF@$:C()MGM$FZSYoqoW<R2W;69KI8!+HIR8nE+KP.,HA9%#:[=mkUl:84F]
%Db+aGdgXZWf1RuBWL`mu$$pd#J`Vq*Hs5e&ZtG9-*aY1nL<%QQOi(ud11RX(cSo<Ak[&]"9;gN)+a+XN=ZTbh2M#1Wl%@uGE*])1
%eo$+UYi:EC<s7rcJ8c4)5b`]EL.(.5,4u[^%J,>O6s\FR%Nb7RSm*^()]Z.uIjgL]&t+aOD6uNbR^p1;T$='84]G3c?>jRX^/jAs
%D`"kdh+sO\a,Yl#<V)"u[<FJM5<6lY@nQ/Q\9JW(RI(/QXnR^n>dbYilu[9Fo3uH94^ZG4];LBtqN@8'3DSs8>!'CL-8V`EgZsof
%!%,76T%roGSnf]s'2gL"nLJ7Ci"-uJmc40?6)=OR+?`5s36g%&.kt[KIlF\R>*6UB>sJIu;Jq&t3mD1V6GXT".`OB(pT<)e8U+[G
%(=$.B%J;(mmN,U2Wmn9m8aSU_O%du.b=s\(7@X!.H"]$aC+Le'"l^.dc/p6F('f!)pXRp&&l`A^(@=`Bl<"BB5=BB3W(9-#?OZ1o
%)W2M-,RD]N<F_0K8KK]ZP;QYS*ha;S>oe.L#?Q;@noF?[W15=robCO2QY%A2hr[hYh-'$5,'IoU8dbj1g30_MYF1FZ-6q(/nS4d1
%4lp,!I#Goe0FaTEkY/T]5MXTB_"+PBfQ6&$WUI]=IH^hQXN\ok1%[X$6.L'sp"C=ECl&&(+XoTriRo[b;!Q#.4$W)XBiB.A9Uk;D
%>k%h=Q?BPtPu,%+k&05-P(!J0n3Wo?!LmGdNGWL(/Yr*/ekJIp^Pp0.QB/*:dm=n4^$a,5go6,k?Zs'_%!=7nX/We%lnV$QVkaXO
%lAb_?j_KR(\U<OJG2XoN!Kn`Ig>#;8Ijq`m6Cr`C+Q5b3^(-="c`C41o!K(99&N`G46c7?;XsTFjB)4%E?@97lZW/(B7\=XT[M(s
%0I]]:KkP#\fj^&t]@kkFA+X%ZWTtTh<@Ve8ilN@^H7SMZl=tNg'QQS.A3>paIV7Qn^=VXt=Zn7:k?]uJ2t'+V;Kl>,WifRj(&OF)
%1F_qc]UZOeBm,gZZ/&@9fY!BDfadeC_\ru&[[#%,jAGJqqh9R)]alK8"!R@/.<%?Alj4Wa:g=\_I"AaYP5URVI#*BK*[o0Ck';.q
%e]>mc!1>S4IQ!Rnj<*cb2)?V4HqV"pCMV6;,tN\J.!mtdeCG-\X*d%=Q9L,,-edF]S?6X<.HX%j*a7c0>eMX0V(2?%CAQZN0"`=+
%ro>UG+;VK%MVGPo1(nG+AGT.;q0G,)4tLJrcQaoDRu00t9([El?&5QX.>]Do;O*FU3b`=dfQqaS1WfDt23Wu!:Ntt[q7X;P>*"_^
%&mp*FSJV!YbXSVu=Us*GfpULHKisCLD<HJ71.P$%(.-2t?Q`"^28?ZLphtDANLe't1VBRPm%V7?^0\S>F%ZY:RI4I>rrclnBd%Y+
%.J,`TD^kRs<:mO;+g6HB,'Wf\:hDJb,hooplg8au^o`D\'E$f#$Pj\^2=pgp-+>=K.C,H/V0;;hS^^7dPMQSic(BPT?9K[)\LmWb
%d%&=140)_P!,A'3!i%-f6O[$u9iVN1jF^^6ku#F5cJ@O+HmX(LF(XmQWJ^(28'%eBI^C$1c(W<SZEc%leB#mQ0Odk`HqQi1bhV<D
%`<gRuQJ1#\2^.V9'jA."SR6U;j0!$\p<"2=JDR$.\4i;0pR"MD_Lii5^J,t+08279=hfJpC$-q:itEVIj4j7Z``@H;X-@LD"J<i;
%*^Xn<Q"sss9M3@eaMA1O%"?,OU_R%tI7>WDFAao_Cb&eS>;11F)B(oF`OM@$bQ&`fNoP;qZLl-n5lCfPXYH+aW8agmLLCdBCLJCM
%94`mSTCM%q"mFS*\Lsh%TbZaDmE>lmeg$M6>rcpT[bH7S)m@m2kUBK"G-59`ZMj!A*9#0@l[9:p^^]*G)JX)KA/]8O<5G+3Fh*:)
%j)ckNfl6etH>=7N]-/fSBXAjgjS9igo=4@#]#\_>HK0?1Ud?0A)hs2r)RHs,_o5F=CcAbbHS2o2<5$mjp5m$4dk%:f1Wg_K3^G-W
%ekUEr7Ng$hVcf0XY?./#$]s1/.>&1G6r\+2p,a9@%**)=#rL3ddc&tj(he.9H*?&T+m@t&*))o[Ng^l`l-FejgLt+ah>mN9B_f+P
%&9[e/H'Hl%M1Z+QFftCgTg[@d=D][]KW["]3Eih&f/?a4laFqu1fb>FQqAU#?<5NpD5Yk%NV#bRBg6X0jNj9cF`VDn$!<gS]Mi`3
%2bA6c/G+,-*&aA$\5mEI4W]3Bhs1qc(P4oA>HdZmkG9?1QW'rV*rS66+urceGinZ]"QT;O-<::Ych@e.O2Y3ER5(B<AdO586Pfe,
%.3"'19>o#UTkT=AVG"Uj#Ppb?KSmn[+Tqbo1)!R!>ZT.rm`m\441Ui^h3;P+"e1?cS;?p=K7f/OrkA!IDA]9_N.l@irU((<;Y;<Z
%#qO=J0`'CDE5Rrar3RVS%%1Yd1=cb;cD1sD7?IN%7!k/@FUnKm?`Sm9?44r"q:Xh@W[]MT)_8U+9A+Vt:.(JWr1)H]PaG;@D,oIe
%\`Sb%Zjt8>NYfR%0m+g3%O8b]mZM>!Ci<^[hO_??$n@uej`7?)-5aqHM+3.Ols*k([X^<m`1[*"RiL6#H^Vpd?B)UG9p2DFCS`-c
%Ap>3=OmB:*/(Ub`$fM$;;S6#2G5?B"BZPOo8\Ce\gr@^Nk7H8%pOJ!"o3gQQH@r+hdOsO51USnZT3dRAAHDVh`DDs9.K+Jl5-)qN
%inVONgJ^WhoL^ZP'N3-*C2%2>l6$\j<q^LF"UhRY>2,+%hP.a-+;XgM+i[-=ijj\Igiol,+XMf824_sAY:snGN=-\4mS0g\TB7qD
%h6tc+QaJWR4cucWm2qV"gs$Kg2VH=ARtG??h/teb;F5E`0GLhBf%ruc,j[2-fI%4<*+fsPWopP6OXmQ&O=nJ-7g,pjQ"msnl7=I3
%#KHHaAC*u2I;SJk'D=q!`cm6jMei"1e=C_>lOgW*5U?:5+4P[R%.PTGMj5Nd]ghSP72WfH-b$FMV1XGU]K*]4Yrs?LWh:kj)e!08
%.]82YZog%+6W7?%0X4h/Q#='uEikPr$d#25Xuos]=\B]p:FktdG47K_\9'*k;V\/CK,&:.5^2^Qqt7YXm]!L8Gub&abRBCM6/\-d
%f]TJ(N:C6\B"7Nbq3AA@4("nOAGm[A4q-bMIGkpfV*ZP8g=h7Sc5,,TqH<Z,:9Ru3-4ObF`L;8J5$k1Q]"#oApVljn@N\1tT':K,
%($f4DoCB>iI*6Jib,VK9d[]9i4JtE1#4F%hK7)&o]4fZ:_cOM\%l*'W/=t^GESX:BB_=#Gqrn!e;9'QV<kZoF7S@p.rs%+:]3&[K
%<=e#k"p@%iQ[/#(arB6^_d9*R[2W_Jh>T7r)D^";:7h-ff`6n1bYn0]TolPq2*<j&1-Db*]RG<Ciu;G<D51<^Ff3^37NJgm'9?7]
%^qI?205'OW4S6/Ml8_!VRM\(7qG.A-64b_Ph55bdG@+YEoD7Nc]@s>VMte?X?)^5MhF#.)cPMf=9mjS;<VoXk;MU%rF\MPK`:ja7
%[l_tA?R"qr^!j"2N4SaYg"fj3)#pO7Gaaqe5MXj!QTD$+M83FYWUPuk7YE2ieiR$eSXcL(ED,#D7ekugqenS`UZUJ]][=&GAZ$2!
%=tTXM=)gbeHL(B7_Un]0c.mrnSbK'X>P;6sO4osQ]LU..Q2M(DSc%<(HEO@i77:h:@@&s&a#b9uI5MNRg[1$s;RKgfH$-UK#aqP(
%qLCcV$EWTPL2WT;a0mk#Cc^]T_bo`@?Kp_<F7.D^3_H5=2(XlV_7Ck/AK9Nf^;'/'dt[Mr1[m7\ns8&-Dsn:HQ/6kMP-cY3hWG%n
%]h<griuK-`eq`OH7sdaHXQ5V@G^E`6BLfhN2_trs2QEG6n%K3fj)n_AaS>b9mR=s1]rX\8/t3T'EQ!4/n=-Huf$cRIQ(3'+Cgb(D
%-8dcTY17C%pTc0_fYRINN">!Ze8W(?nnn4`e`_@e^iB5F&f/SB8bj4NPlZ?@Jn$V-U[deK%BY.fm@*G?I!8IBH-r'T?J5.Yh05LY
%L@3S5bqohE4;Ra`3Bcpkb&66)PeQKfl*j69_i^EWheCR^cKNVW`_Tfc=N*cg/<fhi5E\,QbDtaec!4>:1+T#FjZr?++QYlPm_%NB
%&BA4jNh3"u5LJRWg?Nu!oqP?d0mK&:7r--i/#+(58i$2c<$.>L=1&eKf0m9JPcjUlgYI'\0,u<jGGRJ7)piCXX#f&@o+:<_HS7lu
%4*J$MT]+Wm66!:;NK9k8"Qa2'2mO$bqRt7==JSiqo5;cG)RUN:QQ/4FDt!M=8uim_2qh$G*ooY_Q:BU<g[^Jd3k]!Pq4m@?^r4$0
%9=GFGBtSq$$4L#^DnGi+4FK0'+8Po"],][i)*5?!A0?":Kd"NiKs/RDKUZ&<SFh8?%k0>lO6UYD4leS5?&je\2YHnM=k08EBU8;B
%i)O)Xd%cKlIf&,_X#rj+Y[piEXJ:.W0)"19I8Q%J(G5jMDJO/nih,#m1[n\0L@M!en[96W>Cp@dIcSF.FfPskbe)Kg?oo&eU\hd\
%Ok&GEcha$\1%Bu)dj@:Vl]2#j8\K$YnKnu(Tfna^e$;O4j[IT>s.TP);u,6V1%8M8hQdBQ<TA3`V83[j^FD)i3-#ulnV@^R2r:%(
%an/0;S05p+-TE-XS7),$GCh&d$+qr_e,9,]"*X?ok)5)e6a*K(DYMHA]smh_U9F>J9J7B&'Z#MSRkW-7jY-$JF[m#0'aNU6Pt[[$
%l.i#m?E,ZLY;P)+$bJ'@\9&dAq@m_@IsHK,Q/%KeJ$52O5OXM[<B\,*>!S0\p`^q>>Q!f:9;H]\%gB6j@V&q9UOI=MCbGrmLUMY^
%el7R;#AAQE=?QT!?c=>+/:@8Aj=_7_qN]iCp^L[b5^pSKq:GZ9[rKLPXS\E5*;Vob<W;i%ci*l^q[$S8f"oCXW('0MN,je*ihC[#
%M[GWKH_A$Q7MS[.+9=YKKGP>b6<"OB["M_MVueJ8W"e>n#tP4BJJWG9dM9jAH!-/B+uh%P.8`j,[6PB%!^;Kr,76aO(9\n<]HdMW
%-f(J__M]*X7Q"Jukb+@i_\)tqWB^nR[3,h[`!J[<\jfF+aVlHK.]^/#E)Cao#SV6QjM_u6\`iia3c\)[/_b+gl;:]K<=0?F7"^c8
%NH@mlF9/<?PL@Fl\d!6geYk+c&k,JnPT^=Z9F&:nY$S'D.l(t?$46t$U8F&e3D+K1B$s(k<hA=d$C+VV[c;LfW>a;dOb,um,H]mt
%"@sXo,R%81GX,*!o?`3<?&a^s&K$XgWq[Q"WlcQK76V'q"K4m?5RN4DRSNAQTIOn?TI<')UE\B6+=JU7O=9.&+9\2akT3QWMMA!A
%r(oaE.eB+OL6GT0T+"s=#jH>8+=lgelkUlO'bM#\kphfP^d8W`DS.O[\.V53Ob)@["9lf=g]\U9U-`Mn5Y]iJX``,O?:"BaGt)HN
%`?%=Fc3Ok_.?MLK'NVA7cDdHGU`loj3X&(VcbBI"ZD.'i18l2S732R4QD/HY!JjiLS=gLV-n.h622+VR6Fb#,=%!r,K]=qnlAr.R
%-";,EW:@ct9ihBhTtoan2+,;3r\duVlE:*n$?-CtA@+cT8rXrl-qH="*Yh6t'$6AhL*0C,$I=5'*Y<?fjeB%G9SX##%RXZ986c4]
%URXg:nNoP%6sfIMEHY@2=@7X0Es?C_.ubZXLXf"Midd'1'-.7L!4!>)OJ7Z/SJIJI;&fY:;9:[P*[lht%*IZP:54N25;]J^'f_5R
%b$]Y1"?)=bgW'@\&fLuc\h7Z`?nQPg?lU^aeHD4H)FkKR#`A>,.%:SjbN*r:Jj=-tJrH?8r'7G"OX[gF&rC^>FpKchOG"C1-kXO`
%0Eb:J@/=uSY7!d/b4,Kn*3Zk!=/&(cQc6TNV__ca06EU"Cg#r#KSbl5'L@t>KFQ:>+CZE(2l_?98dp@SMC3YBYVb9laRi8*OF7*1
%#[8CTT.)dJ<b9,?Q9&b1XHfnW!Q0cBhuSBDf1!ir!E;mXoupYMTRabrdh./X.^aaMZpTYPEB8g;JkfkoQDea0:JI_qXu([=WPjh,
%VB'@nM7VmO-)p#\NHCjf4IGF-]+5Sqk?qP(L&`?d`2k&b;da2WjACXk!'pt<lP)-i9KaL8f<r12-orl_Tq:3C`!MkP(h%so7IqmW
%gk%EBWU;2j88/a2cs%]se:f(aFc8&2OLS+n#K.nIdK$(aJ/NquNX.Pq#>ceJ.Ct*l+Ao(t:5d_8%&S8aDMT\05Z!VgaoW)QU]-O;
%-L8nJ8['TEdWK0r^rt/t0FAA[fhho_(rS`#R2o:Q&/>_]/guQ%&9'8P"3j`BU(cpK?kFrr*'b&<$H.XNk<lcl3$&,D'"/,Y->ETj
%.F&%P9qd#%k:nN>eH#ILb'StICW&R`Nmn4E9OJj#3hLjgE0a185[OX8LEk5A=/,"[P'@unJ^=ai/1Q/uYN\nYQ5FM41SP\=*^S/?
%":q/5eTm*6aDf(&ndsbnA0iq39&a-Ja2jSc3*`("0`*F6p@aV6ql<AQ='/^(M$f]Id^Y#t$1V7&cVqEmX?9c-4O^75#\a&k?=[j1
%+=n0[7ZiPt!0EuVJIhtSX6]kPW%QG1DpSu1]g--H=:3oDJ2A/nnn8RoKm!WonZK3MT`YR/c4hCQTFHMR6%O>W0,03(A24DRK0nCO
%"Ql)Q=CDe+A1"n-6jd%H_G3HGj>%>T*&b(_n.7!5Lb-mafEDj2$]kf0\a;?*0JHOp]7;:K6""q+9q\PN<JcU.#-!VRP9)tak>6\J
%3+@q7/p-$0(BX;3Ost;S:e\>X%]q+;`_d:>Z:_#pA58p)<C/dh`"D'+U*a&/GC`j]c:H@`:ed0;e0##@<"Fe!+*C(+&4K#"Fd>;n
%g6B,fZOU@j,`OMpgoWiSW.=H3@7.9s&0XnNj!6q`K"t(EOLifQ""8t]%,-IZOleu<pI&aMcjnD.#UlA0W[esuVD'O%lXUV>&OFr1
%-?t1I:VQ!VQ?u`i8H!^%,/Q)lJOKS^*'/'b5Xrhq6n1B.d:HcUTnS(:602=)fau)ArNJj+&>\q3%nsT8ap\gn;&*2p"R.i."rLL"
%(RTU9kTC#d$4N_W5bp'#C69jIrJ$usrLsC)r!7o47$?>)>#K$@E%>tD_uRmu1^$!XWm%2%"Ul[XM3>Xu,`"KQKHu)Ed&C=PRK=hl
%=UN\I+pS+5FJJtg?pK93$lZDf6(G_YP1(-q<WH,FOpn(6TW]L]6"2==9'S)91kukOI48.6A.0YlZ9Y#6+O%$GGsr[N].oKT-D1"N
%oTCXG`4";.oU0:sTND76<Ikt&1@pY67(OS/,]0J'`hFH2iH1&U5R+!`Z=uT*fof2c8JmD+U*eo`_&RGILm/qlUs[s1cijVM7uj9r
%/pf]nQHH&F.G@EC:l/+RAB.""i'J_t.\2F:9GKjhLdBW;_C>`a+SDc8P"[_MT;jp[7s,PI,esYhm@opU,2-C(GsO)\KWp,#f:\gj
%2(b0m-n#?&GNTl!NEIf/7Ytat`pa'2XB:(g'!5L_+qUM!]DWRC_f/j(bogWG-qM1)Lk%IA8Yi"8`sY]]9KEnoL_=Dh:h5iCA-H8s
%CF_]1'o*P2FUWZ!)m<],95KCi<-OmmNmRpe$M'0U%6U'ML_4;4F8>1[$E.MVK,j$'FYkM&K+'6OkoQK?@g46a>+^Uj"G.bOACX*i
%F*o779M@W#[XaBG6]c_!G70h;6!b,L>%9kb!".f60rI>^8RT=nC8>C!)FPAKp6jG<_#T(S@r9]&N>dYM,da%'b:t<m=Bm%8-&s:N
%]RlG>i__8_=tU':(dS^!M&m5mb0eq8VkJqGdB*Y1=KrN%eP0-lQ8"-9U$34-AQ0\e!<hpJV(-!bR]6dI0Y^Ye8KL,o2C1fp%oc'A
%d-d&>\7S4'F6KuCLP[4qr/ukmM!!ie$>pVeiKb.F?LsPG,8!<^YdkmCIQFYC2+.\H-ptm\HGT,)k*7WAG>1#%+S&TSFdlk!!AS\[
%9FrW%;g:U%JM_r.,XIW*(TM6r_*Ss3@OMZU$:u'jh]hUt`13aq'<YO$GUgNPr/,:IGS36_aC@.uK/a.hNg2n1nUe!K!iYD$E'o^=
%=tf5h%0`=0,."UL3WK@>lW.4ioMl7<C4rO]g'V00$Nah8!iM/7"/r7pfjUh[FtebF;m*iT!_Au-gT/:qdcK;hKrR3W$rN!DA/&>f
%O1/m*!7O)CXS2sYR=\uX$qhb^LB*QlFBE+kTG^(0E(46%!&KJl(p+JYXIQ$6OI1^r\kIf_-1MOe!u!X*0B`oq'T*drQY<T+8G"3^
%Vu].oPp\HuP"+rE85>!UC3\0(VG:-hR2mUT!qGe)W]6,%*BbYW653f54Op^(7"n#5H9aRs&5H8_EauLL-e1(F1/p\T)QtVI1shUS
%,[ph3OVRp&LLDZl+B7i&)MG>rQ4IbC[Lj,i:h,gZ&8Rr\)!SVs>T".s%?iB4AV(>J!a3:X,71;`o'"\*=Fs.s-(`a(0q_uMKba93
%W=#e7`Ea..qFX>228J,]plTI(/HtN!XJ^$=mXd%sB2c&l.afX,\0fFF.!i[T"h:S+aq2,'PXgpnId1$oeel]jV:>Q2</Fch)3N=.
%b(@P;-/uWUjc1gj/.NfuSW;G53X];+;(#UK=N)8W`\C=1j=#pE!I7Nf((1L<)QaeWrHS)?.A3CI4-';/K-UJ<?r/m.7VH6G_J1*\
%X&NmpoW^GfZ]`IG3AT0d8<t5<q7hq*#&/df&@D'2-It9fn4HKZhUC1U6-/NPf>&;V6KFcZ8-<O[q\kP"CRi=`%N-//F$//OO_H/'
%8Muf7A<O;l\F%G]oDmDJK7JP'=tlPc^m'(h!'u,g&.iAG)HBiEFEQ;;68PSr[NVKPSr!88U^.)!#XJVhN1hO,>U=KVC4I[9;:MFu
%kTsph!/hG2k6loT%6$1b:K!CD>?7u8c=9koeRVB^j[@>TBuE\sI%3Mn6'E`p6li?lO1?.)!857%BZYqr4(SF#0/*KA&5VUU\-IYU
%+[#2)d$UFQH_Rl$NOam(#Y]69!#/X<Bn]F&N"#3rOrEd9/%WZ"9N!T(/-j?GOS(p)b=_"#-:@tE>-J]4@7>CF<CN>uLq"%s&?=qV
%NE"9_ipIg6X#+Ys9b=PSQ)+=$m[m#SjPQ-D2-D+3!Sns=9u9GPM?]-k_@\(FPVUW_&6,BE!'rWOn@XW,@l]Gp1^+FB.V%27P*en*
%Lsnmm7,6`h(&?+L!HsI:Uk+H^OcD7A([qQs7Oq6$KIJs_[r@_<n<j3[m1'bo.]BVn?3ooQi"9JX&R+hoQW3j9PQ"M"(N@M>/?j-q
%2aAM4-_;64m0*O^A/SlK0+bV5aY(5VN^A>1",Mt'4;,C>66;!MLr99AP;#Z=oLB^;9,CR"Xhan(oWH[I@UMX5"m#an;FKG)EGb-r
%*g!u<*3Kf`Mp2aJ>a5'uo[+^G0lJ89K(Z#jV`S%&(lFakqBDjXXc:+_;6BYE(I8C"p,V(uaJg,[ph0aH`6s6$1q!WE5e%=Ei&^pQ
%GdIMVm11h"X&<nt^_I%Iq[b.O:r3PUTg!RKG(0Q(W%TA?B_Ho?r@c*mU5HR?1>=\uE2*d8-t:,p:u`$B^k.UQ6+bDD#2EB[!@#)O
%\2#DG&j]Dp+Jt8h`]"q(DBdM++T(,j&KKB,628ep+p@"&+ZT]o4'73gRCcB$P#EK&;e\g-`5"qS^a"Yb<*%H0E<?X_4Kuu0eg5#c
%$))kjB]e,[[=ZZMbpk9E!`j%96B<V.LClLsFiDC=<%;D"7o[n3X"*dQZA>hR#g-(]N>ltA;8g0eL35=VjY5eI'glZ5pCBp=kdEoB
%Cb3t>%F!`U8ct.jkfS&^1d(1-EADboM<u8'W9PSp#I"XV%:r/-o3u5rMl8bhj0:8ZTEH0]aq,*q1aJ2`=quV"*CNu\7(1?6WmDq2
%:7s&8Lm8=$:eIHD*@)O+2aY#$@PB9/f;;t2JoFFLD_=pjQS_8W>S@730cg0JOqc4L.86\]mTGCh,YtFQ&gVhFB2R'laUiBD-\O0`
%6j_jdks^p&^1rgS'e#+Cb2X6>/.M.X;W5Gj:$A5qFPFBR:drC<0Wg#E8AF^I@5D<$+q[Pi8.Ck;iN>?NnHD%G^i:XZ7`%LuW)<M[
%$.E5He_>!3pM2WYKn0#R3N.aV@FT&IrLi>KGSqq2_@QE7ZG<sY,HA7IWb=4(:b\pP.cSQ))P+t_i=>igdKs2ji#QD]8.'_o;KK%7
%N.A]pF\js<4H*`lSq'(hfP'@D,4Zb!9+PXV,-?D?KVuGskiG4"%6qoPa*`TXd@>t_MEkYsKgJWB-/:>OJJ\SD-ufkh6H$lOTnuGE
%4a:"(fBDob/d;A-9r+JRJu:kq#-_i$cIVKd-'<FXB8%*u@sTPd>n>P5U7\-!,V?[(3rgQNV&>D5PH(tsJr%3QZ;1%HCoX8a5nL"n
%@L78r"O]nIS1)k_!M2iV)(J'CBD$5h79AM[Q7g6d_uiC8G`Lm-&2[:U_rH0Nc8%f/.fou"<AbEDJcV)Am3PV=;(N8]FP4Z2rIVg`
%j!`Y]SnF/k-I'V/QrIQ"+$Ck]().`tTA_du8gMt"_-M,>^uRcD7$KRa4=1eLPS_7S6(fJsW['FhA44p>a]3McJRQL8;uOc5(ad@\
%)VAtZRSQ\QB-@PL)Vp81d"_XO?gH+OH)polo2Q)#Q5W'=>"p3[-:u':7oDKH=?.3ISeW*XWepo^e6jR,SlV.'PZ*^e)K$l(faoF/
%Cd187&:c-32<I4?9dUT&$0@(W1GTkf'("U_ZKQ0sj+0H"'kMTE6c9(o&kXm^Yg$V\63mXU,^.62*%EE+89dNiEK:T]as'*HMV:Q8
%S22E4Op=C$JrS+lEMt#r?$(6*7,p+qJ2l(2]1=\?7j@Ke,]n81"cl\-Lni#1E8q/#o7F49:A542:cqneGS#t>Z@]*8qa:_LQ,*K-
%WBW&:'[S<em0d8<86."I'M3HY>A5jP\Kk\p/agdB<!(<.0R;hPbQ1>2C4q2k?"?]/_X(DL'l9:`9MM7Nne+DhZHCD$J0di[`$7?+
%ZhGSc!Wd#(,'uR$.NBqC9nRV&3$ec\&<DEbR0J^-QA-[=<C3[KRB(il-\*=FVV)$^$8?B27Ye>h.-&-/l@^HGO,c`mB^q^mq\9AO
%2)d3gE0Co#P-2E]7WCq[bb@6/3HuGR@.D!MAL.B1M'1'F\8bX>oR\nN_TDbj%'&<t6J<!&&U'+-dpZ)dDHLkjHZ"G+eOM#B)-$/A
%PSl<[\iQYKYK[*MKM*/]/!Qf2q+sUQO&0.[=B%]t]*)8u::(KR1*/#tGRE=OcoiMI/5hl\PIo3.0GMhh9,*1PeogKd&4OgFBcp6(
%r.:iL*_RE]@>Q,rD-DH)]4k[q=05p@N]7gm?&>@bTHZ'#Y2X/80*n=SH:H$Z'hR?hn/Dd+CnDhqk=+,qCI4WcM0R/C9S3QVOi69&
%8-<C.cnMk4kV0CuAYCDk*0\i>Bc)XR_H@XBJRjTo;a?&S^m-#d\U/$7(;1U*ZL%"sCKS>AOLo?$nF@+rpTSdPpH27eo/93A=lu)#
%";fDHV8pIB.&K>g+<V%+>`6m91-i)%gp;3LI`6pjK+ML#f[N,-Y#9P-a;21mYCpeaSbRiQ!i7!"5>#`aNDl4qi>ENLoj;qV;o3d@
%*pgp7+#;664p^O*^'R-m7j!U3VB@\l0n>uXE>n)EdiEb=8>8@K)u"IXAnlIN-<7QjOe1^!EU+_2LC,:4K#cRh#m?fPL+XlG7>#<K
%$Y?V027DChT[l(-7UKL#Qgl@*`T=;'88O.@Vm2qKPs#mrW?RMF!tqi@a7q`H66_)\LV:T6_-GRn,O>mr8306kLfBkJ!fI7S_icEJ
%49d)X1U:^IGb>[[=*/X.@hCh2054PVV5IcV5blBL+fqSSX,4Q3kg'hdZEkW6=ruK-!a>[<,.N&,W.5LSql4`S$:#O"PrLG':ng%N
%J/)md@R.)WeNnT?M$2,"3/^7<J?'&%28akTKE8Cn.+)P9&6nCD58j[6TO'+KHqCh(K*,jVc6^^7RFB/m(]*81d3,fr)O<g*!eoU1
%89&VE`m]T0_TITWH5ba&H^_o^(bK,,UuH,'[KqSX4I/rcF1fRpX$N`d%7SbHJPnnU&qUo&:)JoPUi.?4X@A7EL?%J53nDY(2D<#L
%6O)7A`VgWg+9amf1I(q9(5[W&,U*XrU=."Pno-sq0/[F^LqkJ7`Wt6Zd<']g#coU!;KW?k(bJ:')O-fq^s*]b;@/.YHj65VeGt;o
%_/pW*Tgp<G@C!3HJqbD=-X5[d"'ADm-JZ2_h:8HkSg$_%Becb.*tEoG^C]27%#WF[LID[-=6)1RVK4N4!O-0=Fou1D2H#A<+tK6n
%OKVS\Bc8KKiJ&j\=f$B]K/!"LV\;5<<(rlg@gs;0EX\]tN?+_Nfb#Yu%Q@^^mt4FTNKf$5E\NUu?H*(6GL)Ei%hMM>bNOS_=Q;k,
%0FpsVQ0HZuY]!oW-!(^n;''M>(t5HpGEcbIX)4Lid-:''(K=j5N,I#R)JU*6\`F;`^48%Q0D/^bN$fMMF7=ks[o1B-;$KV4?rpfk
%(Ylk$6L])Pb[b/_j_u#m[$*@+>F,Nc"#.GY$Zd0O+S49f&4GguMNnu_SYktPfAsZSfX1A0hjo>r"?_h-Q?`Xf*9)RG'Bh!Pe-=ug
%jFB"H8I7Hr^nJam"9Kr0Z2i:9H,*0c)5*qT,9\g[l_tjsp_41MOj%n7rYT75&nne6"ZA<f+;!n^Oi2^I)9)jnMjG/@=sJ*ao&H<h
%`8+SE<H`-mQiZ1fU5XGASE-8m+aX`EbY$k3WoSjL2!Oeh"Y[-4'o.4D'["nT@(_,)1(hI05QG(>L,:rrFNhqnU;iu3hh7Yl8-6M[
%X-/4EgdmsB0FS!UncJ9'*C+bA9t1gqf%;6ALiidIBZu/#Wj6S0a,5el`1=Pm/*RtS&/((\p(mMb8HIKH,(793l5l>:U"44$;%OQK
%+KTk#;3-Y_JWQJD',1e3UMq_fjofuqMgtrcL.;g2/Ah!9)Nd`3&)5L]S,'9>'h=\+Np?l.a\NPWPIF7Hh1_kd`.C#[:WbtH9&E6K
%5on<E-Kf#1\*0X:KGViBlFHKc2tnpf[d71@?=/6^_sS5sc7sohZ=t[s^d%sE_]?.D6Fn]en<&Zm8r!AZf/L]["BX`g8)rl<pNCS<
%'.Y9J+=H>nbSVBf]qs=c3RiFP!hOq,^Wfcr$/q,<qna.+PPq>]gSNMAcYfeDe+6h6ViBtll'ER4od'cl?LJcYCL<&[Ln.oAhek7m
%^[6S/]J:V_)](_TI=<*cBqq'X[9iJPX$r[[qYY9m_\#%BMcGg!/4,!pme47&H'#q<%mqDSQ%#8>jj2gKJ[C0TZ_qdA'R\KeSG5G'
%$\:2mQ?nmuOr+4a,NZI1f,2.1`n/E+8.9kp7B_QaK2B"WWtUse+LuEZ`5."6r0,@JgQVHBFq/jP0i6/4f/.!b'OF;laTtCW7a21L
%+qoUhd%9i`Iq"(ECEu5'=(c=c==up<^\WTHLP,*N3\PhCBl6_!S.eV'L_dk<2'9?$\SbX;FY^33<3-pC0dX@M&9!$NloS#Z$rs!n
%n*"P"8j`-2YWU!Y(eN(IoaT%5;UAnr,^<VL?6TQCYt7pLl]aL828\QH@d[FWB>#p=UAB-cjj^L0m?uHm[aNKg_a#mRD$U@\A,Yn8
%"$O:"XI!`j>-@=](IA^T`,eCt*EXlBfD+?Z'Sg.O8"ME<mA8S)517dj;O$!7m:JcC]E\%\8EnsY=ce)*9pWcb^(<0`&PNhtGg^Yk
%LDFq\1lf;u[`].*&h)'HgM+",6fbo6HZGd+++:kspP*H5?E<7t,Z,[bjLKcfaQJTPHCH.:[j*nd_%3O8[6=Jd=!,KH72"o.H(\db
%krj:%?_=)5kbfHRKlijj`A9Y&&:da&L)X;#I%GBLhVR2!S=u'!0Me#kko5=fHpYfKIW&QVN-9LZnDncRpq7eL*hY'9Kn*\PLZc<c
%1FSDXKd!41g*+g08Ro8E.9g=Mnj9,"TF9Z@kD>@-=g3+bTeU[i4*VRZV5i2ek[tL*a]GuPm"CEZHmTk7Y3t8%9aZn8VF2Q#.+3je
%2smsO\W4.^,'MkG:i5B[VW4r2Ok:Ur^E9j%\[HPn#8G'U]O[db''5""^8$B=o<(SZ0;OG3Er'XUibt1Mh9t$l=1i5">jMa/n]E5+
%<nks>qFusiKdfKW-_C:7SWt#5$kJ6U9%$qibA9-8?rgQ(KXp5gHmAC:SI8B_WIF)qbu(hu@@J7`U5I+Ee;]V;n^=B,YNL)/0-pu$
%4P(=ugKD9uOH7sQ".s!595W=hcZj@VHt2t55to=(7lp*.C-fVW\&Vr=\e+O`^JShY*2C$;\)AClSsT=tcg9K6I@KBr"eY7g8+Cu6
%T3q?Y;8TiWg;u\hj>*oo*Ju:\I'8Ep+^7Qbfh3,S)@nbJ:?i7DG9RX:0qILEf2co$c[@_^`iG0\Z!VYWGOJ3<=3F5r<tr\'*[H2f
%I=+DNa)*"@-sHF^BfrkORH2k\NoR[G+K,+GqZSk9pqH/n+;b@:NmDZ_kf_9(&qY+1aQ+d;k.Vdu9GYSD;`d$Oalhu4cHgKjiB`L/
%DXa&-h.tM]k'hd4Y?O5?pAV(&jf`TLJ*sn3B,Sr03D%P#is:gkk\X26L!m-p[X(I-TuS($TQ;o*o[l%uG0f$VTDQ&'mh^@plTL2>
%:Z(2\g\VBA=.TZN6oQm`EP!QPVj-&1gQWIZcPON2i?F:FMAnQGH[mh$cb8bWHQIK.o(.%Nf=8ljI']FepY>U\m5Wb/op5qmk.+V2
%.pLJIDeV=.2JpdRcT8d\H+Qne[e"C?O-8mK3O_3+_DmnN`4ro%be2#8k\W*qkh\.9ZY*Y$c[=Jtqq^[gHGBKdRI>^@m<WA42.jm_
%O9ViYArA4XDpOZk",6Ds2is`+i;NX&oF1@XmhtZODV>-9gX!)"Rr+3h1d1P$`-gk)b6lCXTpYj^F&:6Uj?XK*6uIZ\-=K>Dcjc.2
%2R""dHVJT)q)%MpP"Kp8D2GXld"Z=u]kAo2kcu-oDME:!g-KQERa2B3_h_)U\*J&b[Rd^e\Z^^'gZGo!083O$JeV\;,H:NR%3p@T
%No</M4<Jg<Fh>#qlt[]_F,*.1PDo6`4,V1<n%Aqn)29lYKX(CN3SZm6C`:@$gm?i<VgBRRIX]s[ch!s[dYpWJ=1?4NhKQt1p&=8A
%j18EVmg`:B(iKtji>,eY7'A0+\&d0Zc&j.Md::@Yp!Fdr`l43S:BOq!GW$:6=n<eq27$qim7cgXN%6lW>&3fu6Bko\L$*W5>f-L-
%Yr0&PT%D09Og8I.DpUZ$"')V'Ip8l-oAgJgd:8GJW(Cn([l>ir3_6p5.$VSBIX&`cHjk3d0i\U!W:N?-Q',.Yh=/@4qm^!g7gqI(
%7CrMQ0);DBH$a*u2R4?R7)0ro<J8-g;.XNTPS9n1Kk3VHDjB05)0u"q>1jj=+1R;09I6cSj5Ni79),Z6=:G<hNH-K0CYb)$97c*Q
%hC^(i:0JLrJ%0!=Z<We[U$fge,`nJT\J&&5/;ACZQ<kd<KK/<SfFMn_H1bGFS4^;RaT;/+7U7Mf!VWf*%`ki-1;OnR"`;?ij%Z]7
%,$,4;k1F'^"sm$2geNM0](t\PK.hqC,gn$/22n-[LBYhB&NRC26!W$[m^--hd"5D;g%Ac)Vqu'rEI0pCfPgA]rTuoqgc^,`&te"g
%a\6"P%&@u`RSeF)l&r6;AQL'u]hm/]jGZ03@-;[E:03>dNOI%:,$.mL+XJbbCDPbA%M\1YE*3*En6b(i<tskp(6uiTRCV#a(W#Ng
%TIbrdHsEM%K=nRs/?P/8:iJZXda[Qj?OFV5TTh@&;^EOUJD_)DZg?RePUrN[$1?Qu=A&P?iCgJP\Se5:G_ULYTO`qK@ZBC$rfNPM
%lJ3/lh,*HIF)X:oNT2Nq7@T-$@&GI:(!^1:jHNcu@ZENtFGX*.b00l,_gP>r)V4oR\/eP<,V1%`AX\D=2i\^(k@f$m"p+/kAj8NJ
%Gn*lG)T2$38bE&3BQ=ZKBI2o`80rZm(Dro@TCWmr8>T>C0#M>bfsu%p&i#E;n#(V[_51s[U<M4pP"I@F85rN`2oMQ!+j=ijdL!^k
%Or;),)kDGR;\:W:]\Xhh#<rA;Zp\DLJ$[O-,[q<o4/O^)&D]&cc\;,+4h&$Nq!GVF<c#>7pM4AO4U5snH`RI^VrYDA4`<PLldo9E
%[=4I>rA/$^Q4U"P9>qN'?un(n8S"9./>paZRGb4\j3`i7CX9!A%gkI"m@lAhpO_.o6d]j;E?egC6YNnB"/M`*jF5tOJ^0#lBY<,A
%Zi0m\#C5["j)msP1C@%\-,UiJF/)S1>fnXRE:-&nIA"&PGYl["'_(:/P_J/cHlfn^0;ms5VL;r(YCV,h\^^_OPAm;kbM>+(7dtJt
%?[lW^*'>'rd52r]9_I_)'8,M$!h!4GM)p0%asdR]&^e-Ee$HOu=6RHdOc*A=$qV$pW&ZP\P\gl:OA6ls.?]pUCH`ImXBeFc%;8YF
%$J-aH0$7'.)Rs^36#\SIcPE]D)@LmKo>(df/eCiZT6MokPi3.T1S"Vs5qaZB&*V2jPXE%*E?WV']R.6EI-KXY&iAis5d(hH*X`XB
%<t7MI=I=geg;?`;.YiGFiEEYam=U;$>*(]FJK!l\JlK,f1m52-5t/eX'Y^5n(IYXq8\AW`5HVj)"D-)-I1]peLu"j6],E!3V!jC2
%Psd73q"Y>N"DHfe!U>OLMK?H6<?%sD6JnH('F?sMO_+brQ@;J9Mk:QBelJ$a*u@Zu+gngc(IY?6`iH0Pje1%,KFUN_jU].Q(Sn8N
%ckL[JiuOJe6Y2l=P@(`^;.g0'L3EbL(GP[#e5<pSA\SsIF2THj@1Il)795R"2I>R'+EE/6h,gUp&B(>ThS6bOJo.8aR9+4D,pG$0
%CZUG-g7YFpDkTO$Yoe"9m0=ag4e@$!Rn0bSb%0JPL5"W9@.,3gen\AdZO#S![59iM<a0R;Ef&m,\??O``8\-hYIq]t2\:1Xe;`Lb
%]!Ss(cq_h^3Da&F;JdQ'`1$nZPhlBc,OWaM\WgD0R`O1bb#=e2E2:7_eN7k)-g@6O/6l#q*OetXo)!Jg5j`hX?]\R7k<"D!<C^f=
%cLD,25$n?)bnl-TJ[q/OftHWG[(CYR61pBp-YjI3[TrB"'F=nW_m*Lo-MeqpLupE&;,g-B/7e\u,kW^;]?uY.CAdYiY.98F'iUJu
%XMduU4^TcDP:5b>0+T;pZ\Y]9F1_Nf^67b2*`/'9RG#aYCSd`]cPS'%d$^1OeR'9JiZADabW?nXI,ueM,"?t=(cW\?AXD=>?r`c-
%RIUhe)2J4an>@'A:+C^\OL?[\*[`T=X,"K-YSW2ckN[i<AHHnedK+c@EPuJEBIo1r[Em1f^!/oVp>Q?$TX'r4092VMjm\k'2?RK.
%J4(i#[dR%-pJ3_=D<0fNm^qF5.)13UH7Y76I'Rj4mA=?\KXRJA55[mLmS"TBQ9g(2&2^5_!*)c.E>W&f(['n5=``#piXMMfQ'Z'a
%W%Usl]Bt:@Jr]`;%m#ie^0M6mV,0=9]o^ZoHF)3pn$aUplE>?)5q&stNg*)^4%C7:#GX`MkSW+=B:t,kd4dt''9KO"r_ULonWK9p
%Yp5Y>NU6?B$DsWt&]Df7gF/se:e1!'5X^$K6Q4%=12jg28:?DI"MKGD>ps12;\Nm7qP?1APM\@9""(@ekWFS5F-\b\g*`Yf4t+?+
%P`G'Ig=@I2J#u=+<r([8d9ONVX1,-5#NG!#2W5O+;Lte9^DG'_^:_aq7ZY_\GJ.SNdZe+h!eU'T0Gr^J;mgpl_:7e5YdLn\moCi`
%B#S+l)fnARh?PW*Jt3^\>iW;MqH,V/kWM[pJYoC'io_3.BS!>nB_WhC_Jl0\6acb)4jcP>TJ&t^Y_aR0\E/X9>F>+"l\YP^()h@J
%5#;oh)3F_J&']&G5)]Q#Y>^cE_<4-G-BtY$5d(21]NkEJ>Gebt5:(X;3LGUg('XM???jR>_?l'"^gH:j.?&P#ADOD'o!FG9/)e$-
%$6"%N[hqA.V%B.;Q9)GGkunk&=+TT<^I:rkJ7@\Qn_$&AibGFG[HOqaZOF`BRNZ!=]JG#nA`\M'mq_?2Vd2J$a8j-a5,!]e07Nek
%UA"N(h.F>elA5gHrCF(*@WdCN9:Z4^eqY0/03Wd8.m=T\5Ge+p]=4#FPY75AbiS0^W:F1m>8F1fmIgRX"Sja-E*0iW,sa3VH*e"&
%pQW"Nf=&q%n?lY-jt##W>.?!N2/f>L28CcgMK]##OFCCS$99bm([tHq0JUNk2R!)7l6<C*'Y"%d(R@1b0+,mRN1s1*6896rG:o.?
%YJg(6RA&@,e*&3k'ONDfb!98';s,ZK#`pqH)VGmhd+e\.,ju":[CoTT!L7l-7+1!T\u<?iS#D9BeeL*3@L"LR2;;%lGM7Ani_J.A
%i]/!,)g_8p9mebN!U7)Q5+C_h$5K?j3tiZ[TY@SU:1gnC#p%#3Dn7bCa<cABMVHYZCL2a%!d]QP7a=#XY6=WgNoMZ+@$gKX*>PJa
%W-G."ZW:'U/W<[%M%ZG8#gi6.<,\d/Ir(l@LI6qi5m^\e)[A%k3+i7X2TGMM?)7IWYOf7X7pd4kNgb7V_!f=(W2A'>>WL<^8ur@j
%^!ci/mGU)L7BGLX&"74R+\2p*5SlV26)o!8!R?L+M]G::6D3-f=LJNi.Xf;'^<)4ma.ZTLV/<-$-n,4s:`R=uoHTJojR^O?hu<Vs
%qPOh/jD??E>7ieq?1.)H!sM;nL7D)C*OSr>g8EL-,'Qj^[`HV4qX)Ho]WUW/W8`JU+T+:_a#HnXE12k3C<leDdb>43CO)Gm'`A'/
%[/FBll;EtBcOb`4,o^3&R!i..[qLO>AqI&<"/bi&7[ZGU3hS.tba9@=\?M+c],bpF(P$Ou0j-.aBMg9PL@$We6gmP*OrD\`ijX3+
%@D:A)s#*\Aj)fLF'8?JO[D2BrO[=)Fp/nD(<sqCZB"^N0=3dAK$>RAUNW=+cL1]+.R@oq][SQ_/%c^V3Tm\RVCAl0teVk]e^"]@&
%XhKeQJRYQ"YmB&aLU[.Ge315RE:HYd=/ZD/YM7%:.9*_E`n!,2nQ!<E&APjP92"/;-:V)4,-\81\ck-u86rnYQT"DG/u>ATgugGu
%d8rQ/H&[oZhkPq?:>trT`=lee+N:dGI!PMsTtS>N.\Ia:qrmVlh&B+S>ck_W9B,bm].ECK92<L\VnY/O#m[r+c/RZ:h"^_OhZ#gU
%"hm\..BRBK["mfR+p.FD8g;s,>ufC;LT.37+!2Y)qOt>4C)7PP>pa^C#s/9=Veg0a8sFWrB`3Oa>_KgR+cE)OKb>RTdSslPNfdnF
%Y`FWW@%Q<3^`.9]q@Gj?l*Z)sU0J0O9pj(i]d6re)->%hZIu%2A@%U,T4H]jhF14UQS];.-q_^V\'-_jL/msfAes8@&TJf&8TeM-
%;\Rr-8e-u/4lrQ]+g:)RF#m=m3#+fJ[PdP[kLR+@4c//FM-LPUEtgCoMd<FgWsHpVB*WJgVg:s$ZcR4I$fQle%Q9\,N6Z_QlS5Fp
%SKCL/aR-o`p@YsN?B*m#,Vd:<=9Qj3E``(p/*aq3q,JfU,Tg(2Ek-:tP*8Fb,Ms[[Go'M)*I`7H9\3"*-maN9*J]Hi2=">ppTDKm
%!N"NR/u4+W0f/$?f5Wl"]ma?O85"si$Vl#,A;]gA+@H9B&Ik&9hhn:9XK&>En4V07k@K&Rp??midBtdo6oS@ZP#]0`3(&Z/rc;TJ
%j"+F7"h=+kM*&AU$L`Q.@#!Lrfrig@Mn`T2"59lQq2*<md[7.>q.:^lQE7)s/@WQ#1,@Bu;"N>])HFBkD_I@IW!d[iXM-o!Z+!]0
%Vecl)*b@*U7(4`lA9R,YAgt2%0&]%YKpB,cTL@ZhokUo08@=mmjrt]$ZFf&#n!,0H\W$Z$Q..1O]m('!-`fHa"J(DXM>2CT[P#i:
%_tGk#GZ)KmO%$l`:.q$"\K!ZkS!]l!fo`&q_od+gi0XZAGs.*?4#ddD9a2NP95QAfh:LDOkek$3gQe[i-`Je7c<!o&_6T)AXEIfD
%DJd;X26s@G=&J[t\sJP3U(f;\-!?Ms-#GT5C]9I/X+nJ`\q1<aYg,h#;kA52),6h1b`MG!-7,dWY>scG]M^L1R?H)1^$_Co/1,^7
%F&qu\N.Op$00b'oJb>>*RH/>CX.>EP#8K^mNrfqlJnd?ZMk*Okcr77n_o3iuAa_La;_%--e^6t@[H[>?hs@%dOp(VgP(<'=-@9Bd
%WTi0$c9]NR]n-<[V!(R=(r*fH&KLT^pCDIC`cLl!Fb@-<fuNWsN'q[Sca_G`SBlMsGa[_inYSN?F6%0XmrIK+d-F]%B/cdC:bVQ6
%N4>#AAKGe<>26U@aV`>;O-C*bMbd3Fhj7%L#c?W_#BZ"+7djE*mWQAFDoVV!->i\"%hH(HQ%H/$UoG%G7%"Z7'=i,X5!(2./c:tD
%B*(*!.Slc"H<XuV0hk3I1rRDrY-Vt6W2jPR1<DkI(:MKD"-D`HIrn1\RZ,[)d"rpA%krO0J:_Tm5mpm)q4s%815JG?Fp?at25a9O
%0#D"8k>.67Wp=V\`jXLS*gf]I,O"S&@4AA\#.BrU[:"e^QgWFYZVa-b734@UjHSJH!$4sNpQR^;iCm1(mZSJk$oBDZ1aIE@i7<%8
%L59a5iDl;9Esqh"AVn287A1_QbXlsdIa_h2m\Q/r&dg`K]iZjipnTYr6o8bJcIJjK)Pb=Sn#6+lQ+5cT6m=[XW&J4iWY`4I!APTi
%YApu;PVX2#noT/7lfFa*G>+dOUo*J.o9Ou4&6(N=C`56(:\_:Z^I6*6dq#Yko\7Z]C8%<Qae%U(O8*1+=VUB;>-@(9P;k.)$'T't
%IKSs?WX<i.^X\H7G>s?clpX?u$Ks"?((^>(=OX@jXOL7\3[9KO&"Ap1[``ZuTA/V6W!F$/EHAc\mO=ZtoE1dQO-8.Z].-f>;(+UV
%aTA0<6?Q?EmF0$HB54aChb0=kOO4-S/l+9(KK^*aRj"8HW]2-u[j3oR,;LI4p=&4uWNTb!E,W;3e8I:*jL.'6bHC=e8mCZnL=`!J
%7<<:QqSb[5o=>HZUlni:FcprG`H]A,?(C]>BsI=D&aHAD'r'03-hC7H22R+n?"T+h&h732kn9ZpKhn_7%&q#F6^"NamFB@&0`cb:
%/Z2pcWK.D$Kpc6j!]mg,kb74=XWZitH>G;3*2Ro?"PG-jGM*JmYVFTpe\)!Q-X_m>pLqN;.9S$BR_gG]TioM7B;TF1,T]p>%l`Ig
%W]UVM[9_>dooYE6k7Tdi&fICpL1oe6T\!sQ0:11`3O+Hf;J<t35c-<]Z@pVa`#!&:C$/0hj^*H?c\Fn!oaFe@-*]l%G3%Nm_bZBo
%.H.%7(X5Qt_8Pl0`E>cbE>cCIr61N6F9KE#Ck'"g9YSQ.IIo0k#64#<piQF6A_<I)h@iJ/ATmd,XEIS-&#pYE2IU*5!O><,R5nu-
%q']2eC2En8e%>$L_g#t=L0)%&1_Hq*BB[uUaU*.:fJ14rD"F(&8$h"bqj1<5s1qpAcR[511.$l9*@M96)s%6[`!fdY(Nir-n'u>8
%q#&Ecp?ar"!T`!]&>RR$lU!lg2E&KQF/8HSfaT-0l:2o*cAJG*ds\9h'E6t9dI3^ioCo;+gBpU?m)csBH0tSFf]NNq5s^2-an?NI
%HhZ53W)f(aE[jb(Q;/H'[WW<=4a2TYl*%lgD%5p,Ohq0Kadri;`IeIp8WE[H]="Hq*'fcDW6b/P5?*QDW<R"q5klKpep.iCY1iDc
%UZq2aDO@BcKu8LG67GB,"]tUu1o\Br5+tT2PI&59kV<#Z$Xc#T?\o7VVZB_Ql"O8o@uG\.._c.LaoIU1$[p.J*A'B0@Wr`2(PSmk
%)UoEs>EJWJZ-2O%GlblLe^U)D.NFj74lm1$feV(:;4\^HM6HBId_-XGh*r;%3f-&GNI7_s?;a/ak;#mXD6GXe9I93Yi(A1kj_ujX
%>H74"088N\<QPQ1VrPXToK%cgoN>W$AV0(eC(b4&mjqJjXa&dX/1"!BMSJj`rV"1+kSp\V_P)?[brICF-hqm%0;@;Sg\lc3P_76`
%GV'c\(7hk;#748%"-CQ.5gNTfgL]&hHf'^:)N>l[r]j>/V+kNnCin-\Y>I<q+E.9*MI>W=)^qh[4ZpZ[E$^9<IdUrD7s,f`m"?YA
%^J?f$X";!k,eT(gXS-,kU2]Q4Ffi9Z'(d?:CW(r5O:OTGR@"4;8>]nM81$?/2.r]Z:!g\igpjT=GWh>eMWW=fNTRV#"*sh[k$&tp
%27I$X0So=,RM>K3V5mZ$>o9ikA$U<:AmX!OIo$uF=Lu(J_F:il[9slY)W9J.$t42.HTf_O>I3">N>km\[Wt*3]KVi:iSJ&P,[C7U
%>J@OdhHRMDMGA5"\-O:L&G>G9DE^p,N;8h/2?W2R\ZK*O3?lh=gFb'O62-M/fCWh!6e0_g$g`R[\2V?m+M*l]!Ihb6e4mC>M+J\H
%lT<6djYmO2B=DVW&Ce(5lUu[4>dEYD*L!=+msq/2OD4-7X5WbL#D-Fa)">P2M[,8(/U&-nT;ZoBIEtj)(qH:GebXRiXZ.<\gsFe<
%*=Bde;V^9?Ds+8bd:[e1H>[27JFKku]:F2o(jft%6c)-\m#eZ0au/pb_MrM$,R%:ZSLAAfPelC'[#5jqf5IHYL`c26dLIpQ,1_7t
%J'_8Sdl7pc:HGHK+hl#1Qf#[@4WBP/6kPFPFs1[:>Am'n@,P*`(6P1mmem=8[bi'G0>!FA&mBCsaLH[A(/6<a7ikX:[-eda;Mko,
%1=2gCeO!5r/!\k5e)iiMA\[6(F#G,#-\=Pk\'Nh?kfX`9[9`f;W04`?4;YSEMB/@E?lNOidh*nU'\n,\1-D.RT:Y<XHU9\5A#UQK
%q?m,/=7[$AJOG8dfF)-m8@rpc"131=-Xr1TrZO)PZ2%e9"*%2U%I'd\er$3X(FoAWWjuXeRkBPE-03T]Y4^C?=mb:8n_'`+@X'&_
%Hk%^p3pQfpfp/#??)NY>GXS=1OW7PBpr/08=;T=!qac8ZU"SIPbqum(RdCRDe\`3sTHnU=$1Zh>Z1RmNN"J9S:4+pNF#K%bDop9I
%/4kus1C!ionYWRKfO,q2G5J[)h_#l,?'/ZkMgQ/fJ4!Nd#)8$].78:R<V-=!'O=+`T,AhIT]Gf<l14-;nAjeYc?#c>K,j^&!3XN6
%N0p+]^0$D&^>r$_5RY%]!daM'`j&I5>Cc92666]lEcfEO6a'-`F`["`*?C,IqRKLY>C+?^.GMik'4cZ?&2S'B7ie2L)"!&A]XYRO
%EGkEt];<ho?HZ)Bk6jG*'JC?o[E$ITBd-W+P-0VlJOc"?:m3P<.nsgEJ<kJfj0sT:BG\u^7a4#[6lt<Zi]H4I&c)DaSZXIomcaoD
%r"LubU]r>*oY<ba3*s1YpMU4hn'4UMcZQ`bB#t",-XQ41F_0-6CC)XAkpQAt+b.oTBOs\B3QY9P[^KL&RPS]CF1kU<p-Z>p>:K5,
%3bW[WB?Ifg)cbo'4_^UqOic6[*1<j&6`Jk,Arkun>tfPQ:jmi"guiV)5[iWqo@nBK?n=>l,f"K?6X&l3e9KChis=>@VFfJ02m;^^
%?flMT/5Y5SW&'6:5%na*D-t0b3qOd\-^_1P:fP:=<'a%XbD39j/Z*t6aE>\'mbkOdhnpfkm\=q%<qE^.+Oi2mE,O.)P"Mh8Mqg]"
%^Y5-c9AC9QkiW(H8d\I+OGXc#O8*Annn$-^motd4lZT<<h$i0ickpUa22AJ0=ji62]$ebC`8Pd.cH2+2AO\VCLM:g&[@OFTo#Ba?
%)RMFDE$i,mTjZ!I<A3f(D#FrQ,0'_7DuRoL%93ERaIK'mnfE"%T\"#2qmV,S!'C-`&Wq>n<VbF"aG(6EZqKo_D)`lD$U15@V39iP
%^$])7<">R1q8YOVHJBe.odt$fI@ASe@n/71=PR[u2kZenBIA76'U5!kmZ(n3J%TV/;@VV#d'EAdE-mLg^M\O`H=Ml)^P6o:fEd@L
%TLN.j3K0R8jYMWIj$_RI=Q0lDQ+]D_HEkAFF/9FfX1M7<[#-#%n'+U.(X*UmVi#`NIrF(h(We2\Fm\8,\57#5rOa(s<S*;0P&W\V
%gZp<E4M;3`JRYu.rb\>'`28rg:6^-Plma&sKg/!ZWg?<3bG49<N8r(8T@Kp#FnoY*4*PpMOsnj>U0lp=D"IV2Fk+jQ)eNSXbIJ8[
%)C(7bU/p8)Q[`^[?b!r[-F49V)[_c`!ZJu0Q)p?MG@k-)&#o_ro?_o\:D>)o-!/?298Jn:;nK"qBfd-B4Y<=$43`cl'FbrbbjFhu
%:i@cc5IQ&<OFGs>/FgALFcl@aFt.b5n_?ka[dj'CHd=pO\<.Wqa7&*.k<I/Xie.iOO2Atfi]qUnm)1e@<q2d2L^"UNp-B[c0YuuX
%ZT&ai+2.-MSb:>#%\J2K<r=qm[T,ZM`f\'s8I"n34?q`lqgD:br8Sk=A@iN\j8]/(s/uABI70><=sC=YZLaGtmdk`kUmE]V2M;B6
%dK3@+QtKFiZMYSC1]q=`YptWdB6?`/B&OHm6)GV@6]JN6.[tlQP]GBK%>@t@7p;AhW+"]0-L&F%:T4OlS<lSU8Y*l]\"%:NeS54(
%>uf#S?d2FI86,LZ*iX20^Eh5gn(^LKg4K2e4r$CMY9UR!mFFV-(f<4XmuciYqP@6>:j19M,OL^dZ=2u]PJ\E^)=KIN:e)#g4<\U3
%i,MWk%p?e\?8MeP>;F:nVao0kr[.9dE5CTHa$F`%&eWl^3/uKZYDd9tKhucN?/i9W4]8UTUdQ`'&U"A$>!/(,aB+bj3CS:NM\\`1
%r#Z^YCn`*_Nt8F9H1"^++lCo(h.LD_\[D2iok?u6Or.0QPN:']P#sgIT0ddSeY^@[.S=9LTqK'9Ne'Jr5SHOsT[m4h=*S@kE7Dg!
%^`#qG-nM@Z&-.%7>jdqYMHPI+q5,CHGXA5MjEp'p[]`MV>$$ai*'<j#e%s8uW^[APW@upnn_QZ*e]TSolu'R'reHA2MO)rJ>^+ZH
%7;a\h:=7Kq4OVLKqjW$2p"L5cGgrJM4J))@d?XPf?Dc_mm)KLOlX,jBm5$Lc>Y_sS;aA7@T#NcfQ%Tioi]SZr%PBSDe=Ls6<30Na
%he/$ClZk]Y,T6I8p%K9koVRqCGHZp"bYYn=\UZa/Si4lZeo?95FfrcF8S$rG=Le"5'LUic_P*rtQ3FN(huo\7*^2JUjd>?1"P1kM
%@D'kNgj`._B4V_rqc#^(?#LM5)=ICa@b&0Tq%hL.m3*J!d8l^g/OeSc+*F-[VFkk%M`a=_7[(sYBj5oRFiU<uTIo2kWU7*>KHX9_
%HS1B+ADYLSQ`PS-\oZIj!-dPECmU.BFGEI5X]([(=fh6im'G&>lK@ss.ZpKPSg"8`@!k1Vkj)jBoKJTGX#mHDn5?urlYVYL%^OM`
%cGL3fXPo]FI:BpF5EZZAO"FO8Z=I.9]pFptBBlb^J$WuVIVeJ&6Ii'I^!e(uQt8+QPlk$om/TF)$S#_lMePBZ9rHdqIDoAZajr54
%GEO#o/O^m?jcUC%<)=0nXs,[EFj]K:)RO%^[`D3u62,Ab=&N="gLsU!=)Q`b8>tNQM$F^?VDH07-!koIkkQSe=?4;W'_dk`0)rK&
%98:mFcRFrP,P4(T-:WA$21A3@(#@5<g/GTJN;hD.fM$b-1=TWY\k0?'7CgADjZA.dN_X=."Eak^n`4:H[\sQ\a<lr`.^_?pIFZTr
%CJnmf+Ug,MJ=:1*fJ:qtLOA=%U'BHFdi*RNas+5RWgK)<(BDJW@bo9CKBT$5#rZJd>#FrdNXoJZ2j:Sp.1s.8EgT7DHUAt>9&1#7
%$e>85+9L\*4c)Y4E7>JJ9']cYY1&&oofAiePe92in'hZ^2:Cd;*UU[WguKI)<%S#5NOiL8h5mPh#dMhuf2\!JJ9!(nodO"UKZZN_
%!05b5dfW1@$d)h1Dtb9POemN$LsnE`>d]>[igE>$3CXplk[uhS:K>m&&o2rr.u'4RhDb6@@IP#V_'r8U;:Rd3WIOcS>]iMR?R6X&
%.$\)?SC*uApK&dK_S";HgE1^9TC41BJN6n<Wu69]Nlq*\&!Vk4[@&4sg*Cg(E6OAp;;^hsTr"6r"lFTKl]s.9B-8K;SId/Um,J>)
%4e#c^ceV9Q?I-[/YT/@da87;7RPXm[Km8S1pK*C6DWlMc2YoUGGX-%d%I[+Yas_U(nH-lLfVi-*\`;t#G\%E*,Wd4FLu.].bpCdR
%&=Th;Jh'-`W]&phTMaC_rIZHKkk]I(h6N,:d"e`H9CH-R)&m=VU'U/UKWQt<M,nr,SAPg"_]$[:DV[dWdsSp5o@hf!7XqVOj1meg
%<73tJ;LE^e,[L;m.7SOcW$eQ,Cf>@d:'cQ!0#,Vi_?.TBoD+DAVhaIZFs(AX"\l[hI;R-R%X5G>g:?7*8s%iKfU<8[/T`iV_2&iQ
%LKB(Oj9@h3eZj2a?U+El`'hkBBa]OSXI&_#Qh5EWe#Em9YOcJ`LBeMo-NpR&?<Rk3bcCQKqf]k(pMU1281"[UQTm:jT;1-mU!1i/
%TZX:Rdm*#HWe5LiZ.Z_=6I)ueeI(Rb:h;Y$P8@SL=TaC?IE4mg+Tcdf\UV.eGV!S'V46^_aJu3Yn^NY4q.e;>RN/]8DAe5g_AK@6
%&Sr[uH44saEj(RF^U\697\fSn4FMHsg$u(*^4Nk/dCPQ(5"qrh3=1@/#?;8:qsMblf<sk;L.mT#%Vb$T1^DJ5g#n(,0nrC-;5AW<
%g,EeC#n:L&H>*,>kEN,D$`l<!8o=Al.#bh,2WG"*p^bCuhodd:^:p+_Y$KG0,pq6=[keJJ91[&o(PZE.8B+C4lsm!t'OT)o24b2R
%9YrApWI870;lBr6e@M-SQd@Z>?,,`%]3OMmr_.(pj8Smao74Qf'pP&0?J)Apro(B^(!\enK!NSOh%M/iE,0>\-3'K22&m7p*Os*h
%p(%8$/M<UWB&AihP_cB@'$AT/<B^#:V_fK3<f!HgOeXVB:$*On_5p9=jHnVc4A]-jdhT[EKbRd!U!C;mb:2U@>PgN$5mEBu(c5M,
%D!D.1"J3JmS+33o&1_KS*BI"01#6JZe8)CZ9QbA#UX8lMIC/FM=OPi\DL<e#Q--_9M/-q!C0s[X?QmUuMFdGPn2\f4U0:,H9R71L
%/K!?qfH4b:*!94nE_3=CZh2o;`Ja>=W%Nt*4s4EbQn+7]341UmfsM0uWYb3"*pN(nn&,G;eYSl3Ug`G1dJH:OIsfG,-_6soT]aNe
%/cL]HcZ>S.lI>fI[('cQ/V=I">d6pVGSdrj>o(X,.nnMST?bp'*5Ukp4d&uJ]CZ;OQ[<Z"k!Pka6XP"p\#[8L`rVH7+hl/HpWq--
%`)S=CGZr@khgRfSapS9W&h>lfM&CO!/67#Fn&1O_<3SE\VDrS&M@*?U4p_@VLK793Nduj87j&J_.37B)h71tUf5%g$mY+]dRfda&
%d(+*^]u1U).$P.SXp8/ha$Flepa^41/>quWi)7]L9Xmis79)s&$S>u5=TH(Uf]uhiQ[=KnA#h>(+n\l!QkVX0=.hQkb/Gsh8Zc%N
%%B2)31W]Z&_u,^=9L<h3MWceM?UP@OPkfABA?knfQ->*IBSN\C,/5C"1!#coW\$.[?S7(tL:<&/ah<q$&/TW#\K1"2P^@d7?8a\"
%3bAD+Wn$f'?&CS.($N2i1L\7@405\P8hTUSMbefKC$*gEo])oY^u[U8L-[T?$*im$BL6m:Y<0^A6W@VS3$Cq/Y*c2h4\o@\BVLqi
%h8X`&^A34]eVj>:&g(c03pN<kBfef-\nisSduG>^I2R(HdQF]2r9YMbY2Sq!LQ-lHn7T+FC3_uc]l<i#<f@k;e2I7TgY=5&qK8cb
%,>9ES0%A^VXRQ.PWFf!<KM*\%&._C1=#5%;Z(mJ'LmZ#6NTTFT?/\;pQTEGkEABo<c(#diH>-kDNj^.K-o^HM[R>WJ<42p/"9Tfk
%jTEm@n\&aWTs#\D\im2P)J`XEepkbTM1kqbc&>LrH3,j63)MGd_1<<l>(-1$#$EN(^@I9"<;_ma]"Q:`g%o9uCXfV+Y.iVMM%.r.
%'n&T31^EV*>/bI@`iG/B5V[-)<2e,sLkfc;G72R-pSUXMVg6"JRKR!n*5hl'X<7!.%3A7HQ:epcGV_OG:H*+$lLo_,"q'S%!7o^W
%\r^X/,91MM5E3f";:FH,oMuoBDW)#uH;h4mlNd%sh:p,EKt'r"!S\d:eOtAYdmJ8g&KY#ePYRVZmHr'H6]tdD0)n17<no(f62)`&
%Hq3Y]7S_@`CN$`Oe>RXS\F6QSgu[hVj43N2%mf\Z>l9Q!rQI\)bHXf=UWkF.5cLQn;VT>p`C@F)MO,]K*+Z8ZM6VkW'JlUc.sYF%
%KZi;"kp=)TaELoZi:JmP<(Etk]eidbr*NC[0@F67YL1;O>fSHU`'!%r"Cn"-6=-,K2mE/b39VpVRBrkg+Ao-NYBJGUlA-M$Qj2fT
%:qc,RgnU[^[^CQ,;UR:Hh_%95p:mMW9@-r,ioftH(+RP5[JNBC-$AdKB)nI<-rW&io<00ifGLU*C2a(.G)mI.3>!#a-gF0%$ASr]
%B\##T<bqEXPYrhS>O`J,!AmN@]dDPXN2LL<VG'1OSglmX^^O?H"la)U?S]'Z1[bO(S81hJajJ3@.KEa29nD';LcUMp$:eOk:^PX2
%Y\6pV)L3r6BCukGH4?`mHDMM*Mn0eKb,)$:?A.Ed['nMS-c2EBAJ)/b^fO@"%7q1.6k8KU3mEIm9@NRf&\eN<jEj4-rA#)a)kQel
%XN8bq7U-ul!j0BJ.6H'M-!g-P#_&]SKCSU\\9L3R)6FZCJ>#u*h9Ma8VC8.[[:8+R862LS>0_Qm@lmn`:^*t78!Adn'ZXR\Ls?2\
%VN@hD\=kZ@GSn8DnGqIfLFO^;,_'<r-W\S9[=K.,ZYOpj=he,f)dFRoe2%Bq]u8,5VJI#gKsEt@NA@W`X=LsNZk\ZR<J!r?2K'hG
%e]N^*D/>RQqS&0;1=!B+J[3EN+%,dLU$aduSGV,RPJ+]g4i.XJZa6?8E\NJ_`DNrJ:Zr`eR]N?e0euqDQN_Qpn>k0n`I0`LUnRWc
%EhClhar4TkS<;k;+SSroheb')lu].i[a9?&ELs'2CJ!,#a;2<nl3?p5]Qp'Q&gp)>a7o`3:h=a/f+7@LKtMFVhUpmCnBEaZ%,O>`
%#P(p\$hrboBXqu&Y`Qd2j%JsB<SdN15k$Ti#&o4C[;c"m^4DQX8Q03H\MT46Pm11H>Y7PR2I)3\2QI$:\R2\baernF>;f7LAF'Ql
%U$j'BCP,pnZ2Z_,m*S,k8mc+IjmG$Lrfh!iLOAU]91>b(q=PC%gB/UCb`jR^81n]/Ac#6E*0NNta&`sj&9$&R:s3S96],N$ZkNCs
%\e).HhPan%MN.b_Uf*=C[K#_S<$CRo$XB4)V$o"g6T`*bKMI(Je%$&Aodd&@!c6#;/ZoUWV#NuA]O#[UU"huOVTa0aWa3b;OdMkQ
%L;qTC&8)0!pDN<,II'"Uo=?@LW/BN,i[ES-n&r)rK;;/Z(7<f]+q8kC**"j9hWth<_)89#-EEH*W=2Tl'/5q^l%$KQ?KJ>]c\8G4
%<HZK0;.65?`%5m5rm<-Lb0fc`Ne47i2jCE#6WfOKnNb7GS%Gcf6(+P:l9t;:pd5OYPiK;SLRS&Mp\8VULRONUK7j(>7MY5V4r6j7
%?X@@PkT6)L.8Ore![k's![=>"Est+oY9;C6pT%-O)CYeOPR@Cbkt@.?XrPfTCH.4"MiJ1%mn7`>H)8/tQp]Aq$n.)``M?rf=icf'
%<a<SJqE>m(Y^JcIWK$ea)c_A:59pr_@e$V@-s$l>iYoF,$[0K@Mjr9V.3"3SJQo%M\>YANL;$n<2j3n5IA%jZ/X159d87hDPGNFI
%9/#R9EL!BZOZ!'0'IJkP%2>D1GDL,[1Ff^i.O+uQWS8_;[H76jSnfMN)7h+`Wudqino==Ng!%S\8')_R.3'\W#82C0/BZ"U"Aim>
%:eiW<_5$4"7Q`.`'kB09X=h=XNd'%c@%j7YoKhQZ^T5og8rZ,H<j/$\'%4^f8Z8pcl(l=(0hX3iMoiZt1eD#2djoF]hOgP>S"#t=
%^nF`*-E=g53^Ss*pDtD6iQjfsFgc/pIC?2&Yn<[4`G;X'H4hR9V04"c,I&<D#VnN1AU(&9fH6RNAWh5aI;toEd$H6nqFLSP_Aq(A
%\fLTia`Q40XJhFa^El'-6@F*L+r"TrdFs=!SH2-DWNj'A\prG!;p"2aD6Vfm"7T4aL-/ur3[NfZBu/&YY$KE@5$Z&_)5U8.>I?GY
%98X,-1.5btMn9.ED`?#>QNglq6/!c]Gf2p%/\@6^W^j?qCG<8tog0#!@R=fsfo&II=m&r+@VY2%1N5]g/naFd.aNMdp&A+W4Nf$'
%/Xg3,pNhj/+EXU]H:T,TJk__XOl`!qlX`_PqZ_Nh5%*cAI>iT#4fY=A)lcGOg`VTTItG<b2EY34qSWm,JU];$WRjs-&uC@MQ_WFs
%C!B53.LhIbF#`Qi@bZ0(6Us;]q:g:ZBUjKqh\Y8m:LUgeYoecC/s%oA_K+RCLtSfP)oR,,c.*Y!-11;W8E[#P^]u?XOR*@_k*rE`
%QQT@0bG!S>fY>+aW%R8.`"-dl]O"RST7?f/66&142HZ7%r&40GFH,(EA"Rm$3$TBlS(BUZnMbZ:I-fAS<&&Z5mupf]JNbB@MOE75
%E^/E"hb:mK5]-]TRqA"\@j]?rLI@L`-3Ig`-;5u&n3QQ6/2NW1OS<S7I]=[fe9:S^A<.Mi'q.Y$@0IfU?7RS.8r#/8YD1!,Z?r4[
%p1JACoq.pQ)9[SP>Pn'C'5+Ufed^lQj>F%2Fs.9KX)0d2K,^<:MW^!Wj13]3ZM(e*ZBu>++58Tl9H=E5D.^)a;$fZ`k!%\MlI$G2
%@tYdnF;VZK'4W=:`f*>\/OtkS[u8>C3S34f8lb2).LQ1ur"OVYg=pln`p8o9Rq^[>gI!tDk1e(i*Pjj.E'Q/-&-(/Ci<s&(>d4b.
%)5XuC-O37_O6UlAm0+*8)'&L+WlOK4Et_jOL9f?q6oQVNIb!h2_^d8NN`ucX#;`W#e5FT8PW:c76*B;G1:EZh7?^6k(Nhe!FeS_5
%!U?Ul68(2m3$;b8WD"E+hF+")BP]Ri,JWV:Oee4*hR@A<,>fE#*]J_lF\78CLl@stG'hh$(LA$l0h#n'L%<^d_,oI<W(A_c3e(,m
%OJM%.q+/[U0BAsd]25trd)nG@bc'QtkX/nm'h>.fZEALo6pZlCo+/Tp.-=']=76_AB)%5EGTr7f?'-qCLm408kpanjc6uJg.Xf4G
%,/I3:-85>=.BK%E0;A^0U.S[N($[95FNA.E'kQgnMJUgH]#1^hQQ`C>dj+0\Ta_2+0gbX.e?7:[Jil;O9IPgbBPJ&Ip#i,m:1I[E
%_)7m&"Ik!:\1C'eBW'QHY?;A(+\A>GH\FU>,"]k<;>kO[9sAk&cQ(XUAV?#8q<M#MkN1k@6j,5iKjl"HmG:"F8p/K3.9un.C*?KZ
%$hWk=SNk3:]QhGoQ&'<nZD$eS^sVC?,k[K0#W`>i<aW3`2n0a)V:$d@d)j*piLV7nT@CqJ?NL_cVOBq'ULjmGD7o%@k5lBR!j)u6
%p#9cL.M7<Kd"bWlP^E)'Q)Ni\*qeZdV.78*+K#_4lmujO75^I_PCTm/1,-[LJ=#6X^A>n7>lXAjbj[61cke]r2/gdO->JK3i)Ab:
%i[3"RL-_3DLAu(mM'cCj5)f>G8@;3MAYHi#9IP<iJUTAg7Z*Ah8qM)C&$q(,!VK*(K3h#FL$H1k^0P#QWi--Wi^EI1WZG69K$qr4
%&h<?M5G2i`l#\%J[T?gkh*8#XeO\ZoK08(.Z3@\/[Q6gt@c3rPQ!@7`s0(c+RMsL)m5imcHad?kW-=?36k^jR`9X`-.aH,L]dlaX
%Rh7"U"'$56$:ItC.>t5oSMh@&&W9N]dme:6eY5*g/d$8HHVgOsde%50-*=<S[q6K*9qJ\i+R/`970Xa^*@_(hpF(<9fYf:f/!Z>S
%fqD..E>'.ET]6P4-`5)f[5^jO\m0jL$JK`)"L7uRd3leqObA-W]0[DkOmEQEg^cmc0Qb0'egVKZ<ZEPV;0Pj&_8'P-HdrTAB_:hG
%<`7L\XKm_=iZn)/]*XQW9e?qOHLgZ/20kZ0R`Kc:Sk@8Tm,@H!?rYR)kk]aEU48\7rS,HjQefr0R2YFQ.PCWI9uY\Jj(*eb@`LGl
%YH45t3m"'7JB+Rf45Ge_GX[n7VXk%oDunhSg"+DbrW&HPfD\o\e,7mVc>%Bh%b7Gs.A3ZocZ4f"],(oO+6CZZ;@"PK+p(3;o`P$:
%T\Xn\#!YnFo[N"MBFh%h=2N.u/VLcI$;#Nihd%Clk(k3`pitn")@F9D]_T-)%lpO?UfriT6l^BblnI/O$Y^++ls!?\f<>2Q7"Y2$
%@X5^*NZ?q?hYdZP#aO3Y=<i7DUOFnOY?W>n-AOhG]MrIg;&7orXBi,lgLdW%.Ve0HfA;hFcW0bbOk,eA*'Ym.`BP(e+)$B>fTZs1
%k?io<)_hrDLmpqnSa.XaO=e(I5Y,OahkGW:WaZH+<!OJe"*V^)Sm*@ME%!kFeELIsms_G`fCA1,qpbq"/7*OH7^s%^o-AeNm("dM
%Ok4a5MQ.[CKUr^mLSA=nqn84JZHdYYOCs@S(c1^;C<tK&`+)];(Ya$2]_qak5JQ40j6Lr(2;0]hD4":<dTPo[_^BaL%3O(\8u:aI
%K;]:8VfNtS[h;Kg!V5NMS[i[hVR`Us#<MZ)2(O<_0D8SL3**.`2A^[%!4CKts7'LMm59pY,^[1aV]h(+r;=3lAsP!<qo.<3^=kBW
%NB#O"?CItm1@jGfGq5aj:=A`jBT=>f5;1U<K)Blf#C$IJ?ni&#Ns'CFe+\ptFo.Qo/NfIBBQ%+"i$0j%#gp?<8+1Rg*gP'oF1JDd
%HMFSa[:SF4EZa@Ei"*?l_0rAt=.Uc\>O$L=^%7h^hn/Itj0=H7$<ZW,8j,F7EI](lr.*gYjKR9B^Yaqd]a>eJG<_1%L^+bQn_@m*
%f(6gi;P+c;kC12CrHWj>`FB8d1.'!.ho#Vl\=L6VE9d1=cOOMZ^Mi*tZo7UK.T1b\b')[AQs]5tiK;GBk'.[):_Vo2r>s%daq$3"
%_JuL+0#n'd?1kk^hL*Y]mgXT(nCYb)6aeu0=360iFsj.DVf*)FX3+ATd"6>H[s*=`@u(Z*B4=?JUjKCrI)Fk.AU*(P#W]2H_Z)(%
%p82)%]bQLWlZ*Sj?G96.oH7&;S7$;d']XE90Q'>-*3Qm9M'enE4OCFac6"L.0+C;U4t@>(L3c3!<QbX:(#8K\"=]^0="NutQ:^(=
%ZJEr'XRN(1S!53`Gq[8-W3hF@ID%]P_uk:>pjgQkr["DIbj]m(%*5F%K"38Z=\3@3\ueb528$O95L*=CL@5^li(I>s@NOs<m^^c*
%;Z?@\,9C'W2Bs\6iIs(`'7UA5,DG,&lVjo26OJ$:^D"[s!'M1RG,TCKmV?V/Un?(i<Lp3V9(ZGWb05]:F1k6VL3hN"-?Tr)8Cbde
%rBS*HWhPP2h_/39QLe.Q=-!"AM53o7D<_p9&kYAqr]uPfSmYW8$;j+-<8dl-"+=d=7leVZXt$QQ?V]/1h,Wtt?P_UsB8@Ms%kjF0
%pLQM9_L8JaDB.QJiNnfk!>9=,C7m"fFXgnd/!dZUKTOT*V9nMS!T&?HfuSXF.9TnJ,n6(,_MP;8/V!>'A)U([J^):Mg4rChjZ6j@
%="<+LC?jR?'_8(/YHZoUX7GKE]*<19>\&+QJe8ubA0*d[=506M]c-9[m!0_7o(F'k&UnsdfSM64D/YPt=N)qm;gWh!Q`Nmj)%[9-
%/bK_<^`<*'aO^^Xn02q./M]d4Db?pU6e$!)G1$iFibr'iNIrjGR\/6$e/9gTX\4J0+O!:)(K-NeY#&a8?8XKIk.X<@f@`uqN9;r_
%a8r4e*jWeXQ;1ZsrFA9OO'Cs9'MV>#%;QAujXL:AC)@Bl`T'=$@U;&QoULqb/Mr3i[1u;s=CH>F@L2IP0'KK_'+uWQ`rgZ"Qi3n;
%FS1&)$KUfZelD?A8^0>#p+Bg.3"SRA<L3NO6@L5=AlF\IJ>(=,is%o7>N0:HM>O@PdXB+na2o1ZEG:+WTj<eJ\GHAD2Q6rqeXgs]
%&1:KRoo*f6hO.GNot5)PJrUpbSjZ(_gEq<&20N$d]oWJ;s.m2K24B"^NY+J5J<s%lPeIee7BuIU4=7GhC\,3)VL>RRc`>rqk/S9#
%%P79?QBqh@`asGHBs62PM@6`c-"bpL=2IIQ9NrX*01-_(cXioaQ[7MGHIDUOc_"oSJ*p,5<sb)DCFHHu]H`lQrPJkV*6#M>eo_XS
%S+SmhND[p*V)b_ZjUpsUL"4%ZGcn(RI62'n&51lILZ>\-X8>Z<N#iL_*AG1?(Y`ffoA*4'*o[:iR<WVWBC#FRr;)aVMEXJR7@fI!
%!6Uo\ZSGDRNT.f*.)jh02d.@I;\iV@C0".AaDT^Cntm@K;QBoJ#>.H!rpAklGLG7;2E18J]_DrqDl]'_eME>j@<8Pr4Q8[#X)PZ[
%hJ`@<JG89!#MaCiEs=k#*S0.@;_7NhfUqVGG@RsK5d]s,6?*u/,M^A\q.Xa=e$N:OR:.$[kVu#[E^/Q:Sq0,i3V!i;e&#'lH:1%Y
%OhQ4GP(5aQ(0#h\/ph\!qTQd)_MLB*k;P3l,ieg?c&W7WS+uWU3mr4.64p[B+&T]c];U&?WA@@&7o_oVJicbp8+L\#0_C6tTpTda
%Wk@tekj:\h;82B8AmpYC,jY(JpcY(U.lsOrBH3eIm%'_([k%s(XSRK-8]cn+nOlJ^\fuYhqjN--Psb$WaQ,S0LJk5ZdR!MGe[H2+
%[l9Xi8.iY=D;JPm">I38Z:1E1TUTSu3_DfMC5<s1N:)SSWtOBF^`]e"..lRc^GNZuKH:EVOs17sg9T1cHBJ7CfEf$W\9<V[2FY+8
%h\&OfVQ_IAK:mob$+:1^ZL^Mg@DTuc0OZ0!\5AQKEQfRt`2Q`?&Ce$F&fYSM9I`KA=ktFC2p=?>D"AFZlM_^0=_UpOe@IkK$<Ns*
%]SR;3fLSl2kq_X^3i'm1Gtk2,46>"Q_a+Un6(K\rY9^A(M2,J"$[i_u&1$4]fnl^^jW8K;M,gF9a='ViK-e;i'9):H_2@%8mja!>
%K.:J$H^d67;Vl3hop^s6=6sPSe02kJWutDA/`.u_n6Cn<=iD9(m6a+U@L!gSrd:j8f)pUWJXR$n9h=.#MZM@U:Z;_5?R>2Vs,QO$
%4cq3Fla2&<r/`DXgMo\pKu?sEqXL?fT,<CUMEkiN4$ZfJjo<.d^b>eOLFSd*MJVl"DH8OgUZPkS"?GgaFfB-@#$/SKq:b;?H;DHK
%@9.$UX1+SHXOu!S$ltW-W:b`J&L"ha8TlAUeE+h7-#1[;na*6m:l4Nrel<WGPVF7]KI`e25rIk;h$s[ibuMBi6<K*!]gYFI%DPW,
%;UgB\:_1\8lDBCL[>Uop>iJUp:3>!S+!a."R%C$)\HV1\c%h*.k"7"%H_2UBn=j"c`)TItPmO13aSHUPnLFQS%R$gVc.%FrgKG`f
%-OL.0P6f$/$[i2EoP+oFg@8#l]Zab0rKtZ.<m3aT25NeC9t_Yn*GT$21mB75K[=iKYJItbRU=fsl+:M_9Co>/gZMqp_Y>5P9>o%/
%5;&jh.XB(QBM'UmX`C'qGcq`k,g2.$UsuLpgs.K\h'B0mYr.@p@YfYD6@2[s+%EE3q8PT)`]:>iAr<%]6.&BQBSpK]%s%b3S^q\E
%G`#[0gPasaI/5-@b^8TWgj6lt&iWZpet%XJicFWrNc@gHdThYO)j#MQggTlg:q;D4&%NN)OI?4G<K\B#:'d=dq)_Wd(nYN/$g7<p
%R!la>K6HS>Jr4Vjd=8<L`\-h`,7;7+/ddq;OASS7+)(#qc*mPi=4B8>db'0mOj8$jf4=J@H)=+9Fbm?HPQ`12jL'qg1E<D:PE?U1
%8J[9&V.*$Ocd[Ir?^I="`@@hW#Md[mf7lpBmd"gVLWU&28MS`FB0sYU$jNP'\W^bgGrq-2Ot*@^J.`Ppo\WV,[\t3a&\+0JQPA8q
%b7s=uAH-!g-@`jk.;7e0r%9=6Kct'PI*M(f,1NTB;]0\S9>'Zor`\VL1/b`6\?R=U.@quC((gaA'C<6Q@U#'0j2X[!/'^lXVO5JJ
%0(.UfK!2q\7Nln>]]^@,*W#1gNRkM\3^j)q.I@gn<BacelPicoK+7A4:elq]:E07[8*fTc/\\tmWkf#4F`b\0#dTsKqEi[>RhmX$
%0j%%G%RrbKQIY1f2Ai>gUqitC29`W:PS'^$X3(sAK/#K+7^j_,K0N.+:14XE@)!cI/6B%k`Yd>1Lo+[`!I^H=5i3r)Ej#,IB<1e!
%*UItkG+a0)I[?oj]ap,[SXD8N,\"h@qm74fWMU\ah\kC4d]aBO)5oK(jFb1t@/]3!jg:k#22UC9Z4#Z:"BRGKf32FH@VteNb2+P6
%f?[h,d;2Z]Rnr\*`mn(l'32R:\funmo5Wh]MUHtiOZ+[GS_g$$SQnI>g,r<Y2TH-?CRFBFb6"MtV8h].;/t8DG!/5.ISG7+JjFN[
%QQ(ijf0"7tC5"2\AXGZ2om-sd2d4;gJ3LV&]G#3?eqU[#najH!ooPbp4T`FQgi\*RrG=PH_F`1q(%#IDh#s2p'Ud)SW/8>6qqMXC
%YXG8a;ssQ@V;@pb9qFb]C_!Gbh]gCXd8,ta-.a_c<0V]hTe+JF0doA%F@G#*hh:VOXj(jZ&h6lXm$aiKfZJGk$MJf%^O=IhWTDl+
%J^OOUklO;@/F'iqn;9SPgiAZ]egOGoFGW9O)6K%*Q@#Y'!C%#OQZ1jgL+HL`;M:i2Maenb!>JUo8/Jn5-RuZ-d>D)_Y2C52:Qebj
%B4*a;G=,_\*;(k4aE&N]Y7\O_MS'`FW?qifcCb[a`"H(FMJlosP$36m3.guADM\gbRNK8H"%Ak9s)t5EW'3#;QS\i3Ej;1QBqc_W
%W%CptmP>2\mqD;t//sJM[YjF:qa.,:Cl4b>Q0,$jL%/9M,^u.9n]I0<8n4D=89ELV+;q^S3Ya4]"8N;L`0&f`lfORS[oKT(^,30Z
%Wl=#Y[d>.[16'aX#))btjn9qOn.*,GUAMD=L#$=M)pflX"o3nk[(hhV'.6/.=KrWPYbMmg9t@XGL4)nm/12f9DCE4qRHa*"qGa>t
%FZ1_;AiAD>eG_GuVRX,omt%nlQ(l%3+`OEa_@8b`ZM(K)-ioZQL:X<tAUt#$2Wkta&W<k736Gi(AVIOg[FPrTH/75PpXTl=/&YQY
%o=XQMNFqpK-;N!G,XW?Xe>:CI@/M;$S7B`Bd:P&b-*buNFQFlLm#q9%fBPiQX5nFjMml[0:-AY.I>"754o44jkn]c4!D4=(L(aC6
%,BnWpm>lb^d(#i3IpjuM20<<"eT$=1pnsMfgISS_&e9oZ1X%@>jgp=#nDVU!M`+)';k0<UmU]^.],b,)frs&OFdW4dpCYcN4e-!,
%K\90]e#&"sNsi"V?,QT+)pU$do[ITO#W,n84%p8,=@[+-W^5.&lm&M?`Nu8(SUtl<c6.PHJnS/WRT,,264+:J$2r6`+:SR]+,WgP
%/)P-B?_6QE?3<5oV@$5OCd!ht:bL_1Im_b]9s:;UP6K2Ma@J$G^nnaGYo`-0&R4Hk>.;Fs[W)^)Vqs5UF[5f")@2mIcl1NG)_>&g
%U"36Oj[K`0g6G<5a-F[1[e+F$?R5=T61l:#Bb#@.(:Pr@+-rBkdtcEl9%Iqf^$TqhpPi3hQDBp"o5&`(85Gdc,":&d8VUnB^.]SO
%PsM,F((jl9a8\%X-6cGDnsD(,Q,9%-Af!i2G*IX\WV`^1da$6@kEZae=@dNFEJ%C&(^9L$*Qg1oIJY'B,tLX.>-fOFimX>$U@.]@
%T''^25dUaJdn-#UQ8i+Q^C_)k*0a002d.'/Ig--slus6,N6a7'KDi';J,]AJETUUO&-9%6gF)K`&X'YHd<Tar:po"u\;:kNOI(4&
%h1bRM2)1bbE98b3=$Z/A@@_OMP:*.UjhBD7"*H5V922.DeS^k`\TQjHfS3ffC<D=R[_b\$?`Khe!%[?*<MF6c4&(N4$Vr;q<5]Jr
%b?0.qC>Tm)8jN5!0)FtdN=05eiOn4_f[M'Q/a$66"@cV.T%]C/XP7!(9FRE[KXs8)IFnWC.*Jn#l0nnb*CupQ1Zlnca9\_igQOM`
%A`)8hcM$<6m4._KZ-<q:?1[og'8jotm<ZO/L7RH)G13GVhk#`uCGdJG:I\-/)o@@':c84WI(Uu(Oe"(I^1_'Z*Fjf01;dVUeDB9[
%Xu85!gh-Fg-0TK,9,9ZEX`4*[6Jed'3KSR=4HP"a<dI>U(W,*9bB[.(WEZeKhfHkD(k1d7am^$(f6Gp78;/>cL*XKHH1Kpd#.f$+
%k<$8a)pcV!I-aR1TKV&DoOmnNp[LFjq(e)o.11OFN.9XDrtkCLqhkij;IA/-p\^XG3*jsZqG/G=,K8V2Z`8#8'LM/>,4-<nX[@3T
%Y:jjfph5h5`<1N_O;`a6%l++<l`@j.k!hOpf=o)QrJHaS;E`AnmUOuIUE4D?qd$_jKC8L54OJM+cU7,7pc4*O7jI&D^6`gdcd9'q
%KQ]!j/r\QD$'JBB2,):lLNN)5$<7iZB%G/A6(4mB,(h`jFgjsfJ'Glb#2CE)DrFqMn6SN5,b>F.6^EXNe.h_'(ONl$#j`VsLlK0l
%-/rbfa;&c3IIUN6AkH$FWTe%]CGJ73OcYoc#B?nY>N35'H)tSDQnt:k)_GYY3*Z@kMP/R!+:ZM)cr<Q!6CMK$Bn*-lhP'VD<)7/'
%+PC+?P&V#"3g:>O`D?"bV^Mu2_6XP)T-G,J_1;?m:asPA?iY\uSkQhZ36#Yk4)oO#%aop!p-Rdg.QB5EF"nR^ZOQ"OX+c:il-(]l
%EAqq`1`.,$#DTDt.R\3_adK#@8(-P&d]?f!_J9?H70f6hgaV*/M:A9K`KdCR-=J?$2I5AoSUBY52J736oj6%_8^9bA&EoP7J[H.R
%[X@?-Qq+\VFC@&9"2!ZkO/E]V&c*"!;MfD3l=Y)=^63$\/2&F$^HsRRZ^K0pPF<'>V$odb$Q7X#5N'Epqr)4#"<5O&2UoJaC#tuD
%U]gf2l/&/6E%,*bnhU\MTfcCAe!9cG54l'G@(nWE+M&b3aREuKaK'/32?Bqk.2Pt@;j:c(ffY[KC&O9m&ToNSqT&asV^ur@grlED
%kQBsIE\UE(e>q%bW,Al?a5H$WMHZ(-TE#l\dVP.o;DL/a/g9.hnPAc$/J9(g$G>qA`G%"D0FVq=QCpDY.0Ki&jA<iKFn&EK'M&45
%;e@<`QdY4ef>K21QRR/b[iDN%#N6t1grChO_*q"\P/eo\+?q1,R9!.>lukdu&8pFnOu&AseKG%L@i/'M?_"(>=BEaETi/;Mk`J`G
%W-8n8(,NG\9I+O"RuiJPD`L69EpA[(lN;E)$)HKmctC"'V"du$84g]USmEkSfE(k]>Y'edUs*+AYOY@0o9(U[.QT.;N9ks\WjX:c
%R[qWuDfEIUWoE^0VW]=,9"X[$$Ro,HIT/a,eg=_u[4D8/cTp%0/7_23f<:f.k[0X9o%-ir10j/=qr6qdmOS^FNi<Q3_;!Qg],Yd`
%BD'd&2CE=fCsV0>JsBL,6t-rtD)p$!gtNRB>itGqE9lgWAJ_V/!K0?7lgn6s1+`bl#D?\UTm3tBW#Ee0EJZ)db*JQZ7^CLGQ<;e`
%[3M-3*eWl7]k!BrT$rcMT^HS:OFEXMGjr3sptn4j,`H8TElMU11D;$IFY:l^X7N`t%ZPE:duL%3?-D'bkoD@?jp=rcFh)rjkbmOr
%!L;nC"+f_Y,c;[N<P:u\4Mkc8,RC7$iK5.ncB'PV'/+N%d8-N#cX8AP/Tdl#7h/*'mlQ`ME:P?,M]SI_j(^js=7N_0PmFb<CN&9P
%!"Dij*_=$\KhR!.O=HG8^TBK9?7..[1r74U7<A5T!lYpkhai@#1t,/MX26^Xh'S\I"1%dacbqQmG'S6D0pr.7DT<K5>&a!5V)r"2
%okl0^)^**Tl>*^F)/^6Q;%Q$on!"17Q7#([PD.pV.M;)Ml/BA.Z-#0&dK3%gpDnA),Y)Mpds-=IrERT3"i=V$DN"3J=1c""_`T/S
%E;@[*#7f#R,#b6TWoSi-aJNj@_14^c)pDo+cTj_P:gBhu$ZrtrcSq(H8Z!.3Pc)!.mdT=qNi\n4*N()M$n[eWLn1.@o:!)V/'8iN
%R32YC8=dK-i8;n^l+,.-?u8U'mC>3>JkbTV5rDg;o^$!co9l31%Hr5[2Yq:1U*4$jc"1M8'4!S7:/Gk3FtbCe(2,8<#m/9QrA!M6
%b)R*"l35\\Q?.uTl$"OU`rf'Nl%<6im<3#eO>j*#jrRE&]p@\G-+j#0<8j.j.%JoU*b=Ne1Y`qtKL#W8f7@[OLuXftp2a*q`VFV<
%f9]nK0DhPYFPW3VVJ^fDjGfIl8aA=e5Pa,om6T[?2>c>AapWGS*,pF](n2Uo?)GShM=0!k/#]W,4/(5eS5["):`@M'`[I^`lF1HY
%%&d\*%=NJ@ljXhG/<7DbpWnp!4`"DrJcM-B]iR_[be9f6!K>]ABWYS/&FRbaDl/L\jIUd.%H_-)JGr%5r"VY-&Y$2AHPfBCnUNc*
%jp>q;;pL@A/W(L5J0nuLGW(d@.`md1_t'JPC4UQn8rFT'3\!Sk.d"nT&bL3Pq`?j<;YBDs?)-q(bOJj7LJ^CNZ1W]#KuhJ7JnZ&6
%)-ZH(FUWKM*NP'$f;3bcT7P/>-pm4Na-EVeEXSK"aZFH/2&-m2C_'DQd*$]/*%7/tF>Y>(D\#",`Y$_'!U6LMC<(_60N^%/E83u\
%Eo.MCakBcCDVK'#E\TUV\Lt&I:T5%rncl(VD?"^1.,p[Z>XJG(`E&6FX5\LqmoJ`.n'T,`iS/%Tn;K]N\$^N5QQ(h.VG8l/KqVU/
%4A#Qa-GI\DDZ-W)/=%rb2tbq<[KJdS<pn2k'$s64(7;P27Qg*#i#!8fRQ>BMr6%,%Wb&g7CNAkj3@+G.pV/c9ib,d`S[CE;[b-[(
%kOj_i53OiH*4O*0>?+NGCF.*F%lk]FIX-#Ti"GX3^>t4odu%@(\X-L,"i$c+6=oPZ7VH+Dp\Bp]QgG6@iW2rZVFcuXEceI?PpiS`
%_lXZoPj)JJ6hGqocP?$C7^9E.)X2EV`(%g8#N7A%SsdqqMpiFGe?Tsd,tEbfQdEEGN%4:2?"_]&CqhaJ=gcE=9nu]2]%5gO,:)V7
%_&)JO@D:)88M2V+-k<X"Dmi?a_Z@#GRsY+)BQq1,;'7ED7^\nKj9`0=BHL0R_\hrYV&#5=&W501],X5n@eci4s8O<p"W,USC%M1F
%44rXLZJu!*d`lh%>E!Dq<4%IU0#Cg=l*&/+.QMaf[2*EML2]B'0RGkn9V>X\+kW<O0BZ9kHIYd@a8bec8aYo^8ofDH34S(4.Q+;p
%S5]>bP9/qLk;94a8EbIr58D:.%DrQ_&"Ophko$(X<_OH0Uc>l;Rdq3+Lhu?=[]V<J+eN*9-f\2,0:,j@q7if0HRUlS%6B-5:j:32
%r:WD]>R#L;`Em(V_sJ[mf%<%:(bSu@.>!ce[eYkNMU^J6O89P5oB"iUQecRkI(PJTg`"mOVRN1fUDBNf=E3.Ldm!*K&#[.Nnsr.)
%9_p2@2co4.WV>0IG3,!M1\9)=0oK`@41]HnR9m7U(J6DRNp3!CT`[/pB=,C1_tF89?FI0)fK>2C'%-fu]/TOj="S@>:bXHPqDM\L
%[3"`&6<r)c1CEaVG$@[F'$e\6l9XUgg1nHG.ZjK2Oo(O:iBDeE_tCX$24#Zj>g'fHRT$-fh%I9jE:i-L*]#Y16khm>Z0^TqB7Cfq
%-6%uX'l>V-\8CU3BbtfMK/Sl<5OH^e3?=H8rq6PGjj]P^D-Ggd=s[q.&=WG#*+3L"M3j@:q:b='ac?9FEbTlNeVkYfaOQ)&1tjgr
%8;3Y*^*eT#D)Fgd2p,sLZo,&LWmm^rk)uKhV.L>gH<>d'_\>NBE^5JYp,K$A'^i1hbhs\s[5j-VSsR+Ce5"<!YYp8\<3MDp8?54b
%aE1`jjOC]_"UQap:4Tog`m)p3F(oVH9X5dlU/DY3D4PUdF@G_TIqhpjF%/^`5V\Ar8j%_d[ud<36go'i^hHkaHQ:YK@\50q(hf/i
%M.'C[6!LsVKqOgIg@F!@YZ'_1hQ68sF8>OZ8p,!>kNaQ\PKPtB",bKT`%j#m3*KE>78<on`e^%V(=M%2h#/pBZ'KEafGX!11ffJG
%bJO(4V;Lj8#LqM&9$J5O9PPR%-I4h4K(N8l`NT8a+_>oQ4mNd!<+'.MO1%D',>-5B@jP:=aY/H646m>"JMtAN:O9n7:7q"=^$k1J
%f>lY6UgAH0DnEO6oJq,BMfoVl8GF>hrlGS7IkluSq;;5<J+Yc#h>c.,f73D\s0p=hrI=k8n,N1C"oQXFr3u^on,AZgs4dSFs8'@B
%s4@;9hu1U1rQfuflYlh%^]+iEl#6UNhu2H9s7GX7rVbXPa8bcRrr2A8rQ"ru5Q!_gr94-rhu(a6q4IYAJ,QSM5D5tu9`~>
%AI9_PrivateDataEnd
